;  filename CRP.MAC
;  copied from  [GENERAL]RPMPOK.MAC on 1/6/83
;  modified 1/6/83

	.TITLE	RPM (RUSTY'S POKEY MUSIC) DRIVER
	.SBTTL	Version 1.04	12/17/82
	.SBTTL	RPM CONFIGURATION
	.RADIX	16
	.ASECT
	.ENABL	AMA,LC	;ENABLE AUTO ZERO PAGE MANAGEMENT
	.LIST	MEB
	.NLIST	BYT
;
;CHANGES:
;	NOTE: TO FIND ALL CHANGES, SEARCH FOR THE DATE OF THE CHANGE.
;		THE ACTUAL CHANGE WILL IMMEDIATELY FOLLOW.
;
;	12/17/82 - Version 1.04
;		CORRECTED A CONDITIONAL ASSEMBLY CONFIGURATION ERROR
;		TO PERMIT ASSEMBLY WITHOUT ERRORS OF ANY COMBINATION
;		OF FREQUENCY AND AMPLITUDE ENVELOPE OPTIONS.
;	12/13/82 - Version 1.03
;		CORRECTED A PROBLEM WITH THE PKCUT ROUTINES (USED IN
;		INITIALIZATION) WHICH WOULD CAUSE THE PROGRAM TO
;		OVERWRITE MEMORY IF DYNAMICALLY RECONFIGURED TO ALL 8-BIT
;		VOICES.  THIS CHANGE AFFECTS LINES PKCUT6+10., PKCUT7+10.,
;		PKCUT8+10. IN EACH OF TWO CONDITIONAL ASSEMBLY AREAS.
;		ALSO, CORRECTED INIT. PROBLEM SO THAT EVEN IF A 16-BIT VOICE
;		IS IN USE, IT SHUTS OFF BOTH 8-BIT HALVES WHEN INIT.
;		THIS CHANGE IS IN ROUTINE POKVI (RIGHT AFTER THE STORE THROUGH
;		INDIRECT Y).
;	12/9/82  - Version 1.02
;		MADE PKI1,PKI2 GLOBAL ENTRIES.
;		ADDED CODE TO PERMIT SYNTH. MODE TO OPERATE ON 8 BIT
;		VOICES IN ADDITION TO 16 BIT VOICES.
;		(12 NEW LINES AT ABOUT LINE 1640, RIGHT AFTER BEQ 68$)
;
;
;	11/23/82 - Version 1.01
;		ADDED AN RTS AT LINE 916 (RIGHT AFTER 10$: IN
;		SUBROUTINE PKCUT4).  THIS ERROR WOULD ONLY HAVE
;		SHOWN UP IF YOU WERE RUNNING WITH 4 16-BIT VOICES.
;
; mod by FXL
...TST = 0		;SELF-TEST MODE... (0 = OPERATIONAL MODE)
;
.IF	NE,...TST
	.VCTRS	<0FFF8>,IR4MS
	.VCTRS	<0FFFC>,START
.ENDC
; mod by FXL
	.GLOBL	TUNTAB,DOTPL,EN.HEI,SN.NUM
	.GLOBL	TEMP1,TEMP2,TEMP3,TEMP4,TEMP5

.IF	EQ,...TST
	.GLOBB	$INTCT,ATRACT
.ENDC
; mod by FXL
;ASSEMBLY OPTIONS:
...SV3 = 0		;SPLIT VOICE 3 (INTO TWO 8 BIT VOICES)
...SV4 = 0		;SPLIT VOICE 4 INTO DUAL 8 BIT FREQ (0=16 BIT FREQ)
...PRI = 5		;NUMBER OF PRIORITY CHANNELS FOR V4 (0-5) OR V4B (0-4)
...PRK = 1		;PRIORITY CUT UPON TUNE/NOISE START (0=DISABLE)
...DRE = 1		;DYNAMIC RECONFIGURATION ENABLE (0=DISABLE)
...SYM = 1		;SYNTHISIZER MODE ENABLE (0=DISABLE)
...FRE = 1		;FREQ. ENVELOPES ENABLE (0=DISABLE)
...AME = 1		;AMPLITUDE ENVELOPE ENABLE (0=DISABLE)
...SCK = 0		;SYNC. CHECK ENABLE (0=DISABLE)
...CNT = 0		;NOTE COUNTER ENABLE (0=DISABLE)
;
;
...NBPV = 20.		;# OF BYTES PER VOICE (MINIMUM CONFIGURATION)
.IF	NE,...SYM
...NBPV = ...NBPV + 3	;3 BYTES FOR SYNTH. MODE
.ENDC
.IF	NE,...FRE
...NBPV = ...NBPV + 2	;2 BYTES FOR FREQ. ENV.
.ENDC
.IF	NE,...AME
...NBPV = ...NBPV + 2	;2 BYTES FOR AMP. ENV.
.ENDC
.IF	NE,...SCK
...NBPV = ...NBPV + 2	;2 BYTES FOR SYNC. CHECK
.ENDC
.IF	NE,...CNT
...NBPV = ...NBPV + 1	;1 BYTE FOR NOTE COUNTER (30 BYTES/VOICE MAX)
.ENDC
;
; mod by FXL
POKEY	==	9800		;NO LOW PASS FILTER (QWAK=6000)
;12/9/82	Version 1.02
PKI1	==	POKEY+15.
PKC1	=	POKEY+8.
PKR1	==	POKEY+10.
POTGO1	==	POKEY+11.
PKFL3	=	POKEY
PKVX3	=	POKEY+1
PKFH3	=	POKEY+2
PKV3	=	POKEY+3
PKFL4	=	POKEY+4
PKVX4	=	POKEY+5
PKFH4	=	POKEY+6
PKV4	=	POKEY+7
;
POKEY2	==	9A00		;LOW PASS FILTER (QWAK=7000)
;12/9/82	Version 1.02
PKI2	==	POKEY2+15.
PKC2	=	POKEY2+8.
PKR2	==	POKEY2+10.
POTGO2	==	POKEY2+11.
PKFL1	=	POKEY2
PKVX1	=	POKEY2+1
PKFH1	=	POKEY2+2
PKV1	=	POKEY2+3
PKFL2	=	POKEY2+4
PKVX2	=	POKEY2+5
PKFH2	=	POKEY2+6
PKV2	=	POKEY2+7
;
.IF	NE,...TST
STSW	=	3004
STSW2	=	3005
JYUP	=	3000
JYDN	=	3001
JYLT	=	3002
JYRT	=	3003
S.STR1	=	40
S.STR2	=	40
S.UP	=	40
S.DN	=	40
S.LT	=	40
S.RT	=	40
;
INTACK	=	9D80
.ENDC
;
;  mod by FXL
	.PAGE
	.SBTTL	POKEY ZERO PAGE VARIABLES
	.ASECT
	.=0F0
;
;COMMON POKEY POINTERS
;
.IF	NE,...TST	;IF TEST IN PROGRESS...
	.BLKB	16	;SKIP AUTO XY AREA
.ENDC
OPTRC:	.BLKB	2	;POINTER TO START OF CURRENT TUNE
.IF	NE,...AME
APTRC:	.BLKB	2	;POINTER TO START OF CURRENT AMP. ENV.
.ENDC
.IF	NE,...FRE
FPTRC:	.BLKB	2	;POINTER TO START OF CURRENT FREQ. ENV.
.ENDC
PKPTR:	.BLKB	2	;POINTER TO START OF CURRENT POKEY VOICE
FASV:	.BLKB	1	;FREQUENCY ADJUST MSB SAVE (COMMON POKEY TEMP)
.IF	NE,...TST
$INTCT:	.BLKB	1	;INTERRUPT COUNTER/TIMER
ATRACT:	.BLKB	1	;ATTRACT MODE FLAG (0 = ATTRACT MODE)
.ENDC
;
;
;
	.PAGE
	.SBTTL	POKEY VOICE VARIABLES
	.ASECT
; mod by FXL
	.=0B00
;
VSIZE == ...NBPV
;
;POKEY (VOICE 1)
;
OPTR1::	.BLKB	2	;POINTER TO START OF CURRENT TUNE
.IF	NE,...AME
APTR1:	.BLKB	2	;POINTER TO START OF CURRENT AMP. ENVELOPE
.ENDC
.IF	NE,...FRE
FPTR1:	.BLKB	2	;POINTER TO START OF CURRENT FREQ. ENVELOPE
.ENDC
ONOTE1:	.BLKB	2	;CURRENT OUTPUT NOTE COUNT
ODUR1:	.BLKB	2	;CURRENT OUTPUT DURATION REMAINING
VVOL1:	.BLKB	1	;MEDIAN VOICE VOLUME
VSN1:	.BLKB	1	;CURRENT TUNE SEQUENCE #
VIU1::	.BLKB	1	;VOICE IN USE FLAG
VSEQ1:	.BLKB	1	;VOICE DURATION SEQUENCE #
ORATE1:	.BLKB	1	;CURRENT OUTPUT RATE (BIGGER # = SHORTER DUR.)
OKEY1:	.BLKB	1	;CURRENT KEY OFFSET
.IF	NE,...SCK
OCHK1:	.BLKB	1	;CHECK MASK FOR ALIGNMENT OF DIFFERENT VOICES
OCHKM1:	.BLKB	1	;MASK USED TO STORE INTO OCHK1 (A CONSTANT)
.ENDC
VAC1:	.BLKB	1	;VOICE AMPLITUDE CONTROL BITS
.IF	NE,...SYM
VSF1:	.BLKB	1	;VOICE SYNTH. MODE FLAG
VSA1:	.BLKB	2	;VOICE SYNTH. MODE FREQ. ADJUST
.ENDC
OPTSV1:	.BLKB	2	;OUTPUT POINTER SUB-PHRASE SAVE
VSNSV1:	.BLKB	1	;TUNE SEQ. NUM SUB-PHRASE SAVE
OPTLL1:	.BLKB	2	;OUTPUT POINTER LOOP SAVE
VSNLL1:	.BLKB	1	;TUNE SEQ. NUM LOOP SAVE
VLC1:	.BLKB	1	;LOOP COUNTER
.IF	NE,...CNT
VCNT1::	.BLKB	1	;NOTE COUNTER
.ENDC
;
;POKEY (VOICE 2)
;
OPTR2::	.BLKB	2	;POINTER TO START OF CURRENT TUNE
.IF	NE,...AME
APTR2:	.BLKB	2
.ENDC
.IF	NE,...FRE
FPTR2:	.BLKB	2
.ENDC
ONOTE2:	.BLKB	2
ODUR2:	.BLKB	2
VVOL2:	.BLKB	1
VSN2:	.BLKB	1
VIU2::	.BLKB	1
VSEQ2:	.BLKB	1
ORATE2:	.BLKB	1
OKEY2:	.BLKB	1
.IF	NE,...SCK
OCHK2:	.BLKB	1
OCHKM2:	.BLKB	1
.ENDC
VAC2:	.BLKB	1
.IF	NE,...SYM
VSF2:	.BLKB	1
VSA2:	.BLKB	2	;VOICE SYNTH. MODE FREQ. ADJUST
.ENDC
OPTSV2:	.BLKB	2	;OUTPUT POINTER SUB-PHRASE SAVE
VSNSV2:	.BLKB	1	;TUNE SEQ. NUM SUB-PHRASE SAVE
OPTLL2:	.BLKB	2	;OUTPUT POINTER LOOP SAVE
VSNLL2:	.BLKB	1	;TUNE SEQ. NUM LOOP SAVE
VLC2:	.BLKB	1	;LOOP COUNTER
.IF	NE,...CNT
VCNT2::	.BLKB	1	;NOTE COUNTER
.ENDC
;
;POKEY (VOICE 3 OR 3A)
;
OPTR3::	.BLKB	2	;POINTER TO START OF CURRENT TUNE
.IF	NE,...AME
APTR3:	.BLKB	2
.ENDC
.IF	NE,...FRE
FPTR3:	.BLKB	2
.ENDC
ONOTE3:	.BLKB	2	;CURRENT OUTPUT NOTE COUNT
ODUR3:	.BLKB	2	;CURRENT OUTPUT DURATION REMAINING
VVOL3:	.BLKB	1	;MEDIAN VOICE VOLUME
VSN3:	.BLKB	1	;CURRENT TUNE SEQUENCE #
VIU3::	.BLKB	1	;VOICE IN USE FLAG
VSEQ3:	.BLKB	1	;VOICE DURATION SEQUENCE #
ORATE3:	.BLKB	1	;CURRENT OUTPUT RATE (BIGGER # = SHORTER DUR.)
OKEY3:	.BLKB	1	;CURRENT KEY OFFSET
.IF	NE,...SCK
OCHK3:	.BLKB	1
OCHKM3:	.BLKB	1
.ENDC
VAC3:	.BLKB	1
.IF	NE,...SYM
VSF3:	.BLKB	1
VSA3:	.BLKB	2	;VOICE SYNTH. MODE FREQ. ADJUST
.ENDC
OPTSV3:	.BLKB	2	;OUTPUT POINTER SUB-PHRASE SAVE
VSNSV3:	.BLKB	1	;TUNE SEQ. NUM SUB-PHRASE SAVE
OPTLL3:	.BLKB	2	;OUTPUT POINTER LOOP SAVE
VSNLL3:	.BLKB	1	;TUNE SEQ. NUM LOOP SAVE
VLC3:	.BLKB	1	;LOOP COUNTER
.IF	NE,...CNT
VCNT3::	.BLKB	1	;NOTE COUNTER
.ENDC
;
;
;POKEY (4 OR VOICE 4A)
;
OPTR4::	.BLKB	2
.IF	NE,...AME
APTR4:	.BLKB	2
.ENDC
.IF	NE,...FRE
FPTR4:	.BLKB	2
.ENDC
ONOTE4:	.BLKB	2	;CURRENT OUTPUT NOTE COUNT
ODUR4:	.BLKB	2	;CURRENT OUTPUT DURATION REMAINING
VVOL4:	.BLKB	1	;MEDIAN VOICE VOLUME
VSN4:	.BLKB	1	;CURRENT TUNE SEQUENCE #
VIU4::	.BLKB	1	;VOICE IN USE FLAG
VSEQ4:	.BLKB	1	;VOICE DURATION SEQUENCE #
ORATE4:	.BLKB	1	;CURRENT OUTPUT RATE (BIGGER # = SHORTER DUR.)
OKEY4:	.BLKB	1	;CURRENT KEY OFFSET
.IF	NE,...SCK
OCHK4:	.BLKB	1
OCHKM4:	.BLKB	1
.ENDC
VAC4:	.BLKB	1
.IF	NE,...SYM
VSF4:	.BLKB	1
VSA4:	.BLKB	2	;VOICE SYNTH. MODE FREQ. ADJUST
.ENDC
OPTSV4:	.BLKB	2	;OUTPUT POINTER SUB-PHRASE SAVE
VSNSV4:	.BLKB	1	;TUNE SEQ. NUM SUB-PHRASE SAVE
OPTLL4:	.BLKB	2	;OUTPUT POINTER LOOP SAVE
VSNLL4:	.BLKB	1	;TUNE SEQ. NUM LOOP SAVE
VLC4:	.BLKB	1	;LOOP COUNTER
.IF	NE,...CNT
VCNT4::	.BLKB	1	;NOTE COUNTER
.ENDC
;
.IF	EQ,...SV4	;IF VOICE 4 NOT SPLIT...
.IF	GE,...PRI-2
	.BLKB	...PRI-1*...NBPV	;SPACE FOR PRIORITY CHANNELS
.ENDC
.ENDC
.IF	NE,...SV4	;IF VOICE 4 SPLIT...
	.BLKB	...PRI*...NBPV		;SPACE FOR VOICE 4B + PRIORITIES
.ENDC
;
;VOICE 3B STORAGE
;
.IF	NE,...SV3	;IF VOICE 3B (VOICE 8) ENABLED...
	.BLKB	...NBPV
.ENDC
;
OPTR5 == OPTR4+...NBPV
OPTR6 == OPTR5+...NBPV
OPTR7 == OPTR6+...NBPV
OPTR8 == OPTR7+...NBPV
VIU5 == VIU4+...NBPV
VIU6 == VIU5+...NBPV
VIU7 == VIU6+...NBPV
VIU8 == VIU7+...NBPV
;
.IF	NE,...CNT
VCNT5 == VCNT4+...NBPV
VCNT6 == VCNT5+...NBPV
VCNT7 == VCNT6+...NBPV
VCNT8 == VCNT7+...NBPV
.ENDC
.IF	NE,...SCK
OCHK5 = OCHK4+...NBPV
OCHK6 = OCHK5+...NBPV
OCHK7 = OCHK6+...NBPV
OCHK8 = OCHK7+...NBPV
OCHKM5 = OCHKM4+...NBPV
OCHKM6 = OCHKM5+...NBPV
OCHKM7 = OCHKM6+...NBPV
OCHKM8 = OCHKM7+...NBPV
.ENDC
;
;MISC. COMMON POKEY VARIABLES
;
.IF	NE,...PRI
PRIF:	.BLKB	1	;FLAG TO TELL WHEN HIGHEST PRIORITY OUTPUT
.ENDC
...SVV = 0
.IF	NE,...SV4+...SV3+...DRE
...SVV = 1
SVF:	.BLKB	1	;CURRENT VOICE CHANNEL SPLIT (8 OR 16 BIT)?
.ENDC
.IF	NE,...DRE
DREF:	.BLKB	1
.ENDC
;

;  mod by FXL
;		RAM for RAM tune tables
RS.RMS=.
RS.DPL::	.BLKB 8
RS.DOT::	.BLKB 8
RS.KEY::	.BLKB 4
RS.K2::		.BLKB 4
RS.K3::		.BLKB 4
RS.K4::		.BLKB 4
RS.RAM=.-RS.RMS+1

	.PAGE
	.SBTTL	MACRO DEFINITIONS
;
;.TUNE
;	SET UP ADDR. OF TUNE AND SET FLAG TO START PLAYING
;		SETS UP THE TUNE IN ACC OF PASSED AS TNUM
;
.MACRO	.TUNE	PKVN,TNUM	;POKEY VOICE (1-8), TUNE #
	TXA
	PHA			;SAVE X REG.
	LDA	#TNUM
	ASL
	TAX			;SET UP OFFSET INTO TUNE TABLE
	LDA	X,TUNTAB
.IF	EQ,PKVN-1
	STA	OPTR1
	LDA	X,TUNTAB+1
	STA	OPTR1+1
	STA	VIU1
.ENDC
.IF	EQ,PKVN-2
	STA	OPTR2
	LDA	X,TUNTAB+1
	STA	OPTR2+1
	STA	VIU2
.ENDC
.IF	EQ,PKVN-3
	STA	OPTR3
	LDA	X,TUNTAB+1
	STA	OPTR3+1
	STA	VIU3
.ENDC
.IF	EQ,PKVN-4
	STA	OPTR4
	LDA	X,TUNTAB+1
	STA	OPTR4+1
	STA	VIU4		;TURN ON MUSIC
.ENDC
;
.IF	EQ,PKVN-5		;   MIGHT HAVE A FIFTH VOICE
	STA	OPTR5
	LDA	X,TUNTAB+1
	STA	OPTR5+1
	STA	VIU5
.ENDC
.IF	EQ,PKVN-6
	STA	OPTR6
	LDA	X,TUNTAB+1
	STA	OPTR6+1
	STA	VIU6
.ENDC
.IF	EQ,PKVN-7
	STA	OPTR7
	LDA	X,TUNTAB+1
	STA	OPTR7+1
	STA	VIU7
.ENDC
.IF	EQ,PKVN-8
	STA	OPTR8
	LDA	X,TUNTAB+1
	STA	OPTR8+1
	STA	VIU8
.ENDC
	PLA
	TAX
.ENDM
;
;
.MACRO	LDAL	...1
	.BYTE	0A9
	.WORD	...1
	.=.-1
	.ENDM
.MACRO	LDAH	...1
	.BYTE	0A9
	.ENABL	M68
	.WORD	...1
	.DSABL	M68
	.=.-1
	.ENDM
;
	.PAGE
	.SBTTL	RPM SOUND TEST ROUTINE
;
;START OF RPM DRIVER TEST PROGRAM
;
.IF	NE,...TST
	.ASECT
; mod by FXL
	. = 0E000
.ENDC

.IF	EQ,...TST
	.ASECT
	.= 0CCE0
.ENDC


.IF	NE,...TST
;
;CURRENT DRIVER TEST PROGRAM CONFIGURATION:
;	VOICE 3 SPLIT
;	VOICE 4 SPLIT
;	3 PRIORITY LEVELS ON VOICE 4B
;	AMP. ENV. ENABLED
;	FREQ. ENV. ENABLED
;	SYNTH. MODE ENABLED
;	SYNC. CHECK DISABLED
;	NOTE COUNTER DISABLED
;	DYNAMIC RECONFIGURATION ENABLED
;
START:	SEI			;DISABLE INTERRUPTS
	CLD			;CLEAR DEC. MODE (SET TO BINARY ARITH.)
	LDX	#0FF
	TXS			;INIT. STACK
	STX	ATRACT		;SET TO NON ATTRACT MODE
;
	JSR	ISND		;INITIALIZE ALL POKEY VOICES
;
	CLI			;ENABLE INTERRUPTS
LOOP:	LDA	VIU1
	ORA	VIU2
	ORA	VIU3
	ORA	VIU4
	ORA	VIU5
	ORA	VIU6
	ORA	VIU7
	ORA	VIU8
	BNE	LOOP		;MAKE SURE ALL SOUNDS OFF
	LDA	STSW2
	AND	#S.STR2
	BNE	29$
	JMP	43$		;IF WANT SOUNDS
29$:	LDA	JYUP
	AND	#S.UP
	BEQ	5$
	LDA	JYDN
	AND	#S.DN
	BEQ	10$
	LDA	JYRT
	AND	#S.RT
	BEQ	15$
	LDA	JYLT
	AND	#S.LT
	BNE	LOOP		;WAIT FOR START SWITCH
	JMP	33$
;START NEW TUNES
5$:	.TUNE	1,13.		;PASTORAL
	.TUNE	2,18.
	JMP	LOOP
10$:	.TUNE	1,14.
	.TUNE	2,19.
	JMP	LOOP
15$:	.TUNE	1,15.
	.TUNE	2,20.
	JMP	LOOP
33$:	.TUNE	1,16.
	.TUNE	2,21.
	JMP	LOOP
43$:	.TUNE	3,11.
	JMP	LOOP
;
	.PAGE
	.SBTTL	4MS INTERRUPT ROUTINE FOR RPM DRIVER TEST
;
;IR4MS
;	4 MS INTERRUPT ROUTINE
;
IR4MS:	STA	INTACK		;ACK. INTERRUPT
	PHA			;PUT REGISTERS ONTO STACK
	TXA
	PHA
	TYA
	PHA
	JSR	PKDR
	INC	$INTCT		;INC. 8MS TIMER
;
	PLA			;RESTORE REGISTERS
	TAY
	PLA
	TAX
	PLA
	RTI
.ENDC				;END OF TEST CODE
	.PAGE

; mod by FXL
	.INCLUDE CJTB.MAC
;
;PKDR
;	POKEY 4MS INTERRUPT DRIVER
;
PKDR::	LDA	ATRACT		;ATRACT MODE ON?
	BNE	2$		;IF NOT
	RTS			;IF ATTRACT MODE ON, NO SOUNDS
;
2$:	LDA	$INTCT		;WHICH POKEY TO UPDATE THIS FRAME
	LSR
	BCC	10$		;IF VOICE 2 THIS FRAME
	JSR	PKOUT1		;OUTPUT TO POKEY (VOICE 1)
	JSR	PKOUT3		;OUTPUT TO POKEY (VOICE 3)
.IF	NE,...SV4
	JSR	PKOUT5		;OUTPUT TO POKEY (VOICE 4B)
.IF	GE,...PRI-3
	JSR	PKOUT7		;OUTPUT PRIORITY 3 (VOICE 4B)
.ENDC
.ENDC
.IF	EQ,...SV4
.IF	GE,...PRI-2
	JSR	PKOUT5		;OUTPUT PRI. 2 (VOICE 4)
.ENDC
.IF	GE,...PRI-4
	JSR	PKOUT7		;OUTPUT PRI. 4 (VOICE 4)
.ENDC
.ENDC
	RTS
;IF HERE, TIME TO OUTPUT VOICE 2
10$:
	JSR	PKOUT2		;OUTPUT TO POKEY (VOICE 2)
	JSR	PKOUT4		;OUTPUT TO POKEY (VOICE 4 OR 4A)
.IF	NE,...SV4		;IF SPLIT VOICE 4...
.IF	GE,...PRI-2		;TEST FOR PRIORITY 2
	JSR	PKOUT6		;OUTPUT PRI. 2, VOICE 4B
.ENDC
.IF	GE,...PRI-4
	JSR	PKOUT8		;OUTPUT PRI. 4, VOICE 4B
.ENDC
.ENDC
.IF	EQ,...SV4		;IF NON-SPLIT VOICE 4...
.IF	GE,...PRI-3		;OUTPUT PRI. 3, VOICE 4
	JSR	PKOUT6
.ENDC
.IF	GE,...PRI-5		;OUTPUT PRI. 5, VOICE 4
	JSR	PKOUT8
.ENDC
.ENDC
.IF	NE,...SV3
	JSR	PKOUT8		;OUTPUT VOICE 3B
.ENDC
	RTS
;
	.PAGE
	.SBTTL	RPM POKEY INITIALIZATION
;
;ISND
;	SUB. TO INITIALIZE POKEY FOR USE
;
ISND::	LDX	#0		;SET UP FOR POKEY VOICE 1
	STX	PKI1		;ALSO, INIT POKEY DEVICES
	STX	PKI2
.IF	NE,...DRE
	STX	DREF		;CLEAR DYN. RECON. FLAG
.ENDC
;WAIT TO INSURE POKEY COMPLETELY READY
2$:	DEX
	BNE	2$
;
	LDA	#3
	STA	PKI1		;OUTPUT SECOND BYTE TO POKEY INIT.
	STA	PKI2
.IF	EQ,...SV3
.IF	EQ,...SV4
	LDA	#78		;VOICES 3 AND 4 ARE 16 BIT EACH
.ENDC
.IF	NE,...SV4
	LDA	#50		;VOICE 3 IS 16 BIT, VOICE 4 SPLIT INTO 2 8 BIT
.ENDC
.ENDC
.IF	NE,...SV3
.IF	EQ,...SV4
	LDA	#28		;VOICE 3 IS 2 8 BIT CHANNELS, VOICE 4 IS 16 BIT
.ENDC
.IF	NE,...SV4
	LDA	#0		;4 CHANNELS SEPERATE (3 AND 4 ARE DUAL 8 BIT)
.ENDC
.ENDC
	STA	PKC1
	LDA	#78
	STA	PKC2		;TIE CHANNEL 2 TO 1, 4 TO 3
;
	JSR	PKCUT1		;INIT VOICE 1
	JSR	PKCUT2		;INIT VOICE 2
	JSR	PKCUT3
.IF	NE,...SV3
	JSR	PKCUT8
.ENDC
;
	JSR	PKCUT4
.IF	NE,...SV4
	JSR	PKCUT5
.IF	GE,...PRI-2		;CHECK FOR 2 PRIORITY LEVELS
	JSR	PKCUT6
.ENDC
.IF	GE,...PRI-3		;CHECK FOR PRIORITY 3
	JSR	PKCUT7
.ENDC
.IF	GE,...PRI-4		;CHECK FOR PRIORITY 4
	JSR	PKCUT8
.ENDC
.ENDC
.IF	EQ,...SV4
.IF	GE,...PRI-2
	JSR	PKCUT5
.ENDC
.IF	GE,...PRI-3
	JSR	PKCUT6
.ENDC
.IF	GE,...PRI-4
	JSR	PKCUT7
.ENDC
.IF	GE,...PRI-5
	JSR	PKCUT8
.ENDC
.ENDC
;
.IF	NE,...SCK
	LDA	#0FE		;SET UP POKEY CHECK MASKS
	STA	OCHKM1
	LDA	#0FD
	STA	OCHKM2
	LDA	#0FB
	STA	OCHKM3
	LDA	#0F7
	STA	OCHKM4
.IF	NE,...SV3
	LDA	#07F
	STA	OCHKM8
.ENDC
.IF	NE,...SV4
	LDA	#0EF
	STA	OCHKM5
.IF	GE,...PRI-2
	LDA	#0DF
	STA	OCHKM6
.ENDC
.IF	GE,...PRI-3
	LDA	#0BF
	STA	OCHKM7
.ENDC
.IF	GE,...PRI-4
	LDA	#07F
	STA	OCHKM8
.ENDC
.ENDC
.IF	EQ,...SV4
.IF	GE,...PRI-2
	LDA	#0EF
	STA	OCHKM5
.ENDC
.IF	GE,...PRI-3
	LDA	#0DF
	STA	OCHKM6
.ENDC
.IF	GE,...PRI-4
	LDA	#0BF
	STA	OCHKM7
.ENDC
.IF	GE,...PRI-5
	LDA	#07F
	STA	OCHKM8
.ENDC
.ENDC
.ENDC

;  mod by FXL
	LDX #RS.RAM+3
 10$:
	LDA DOTPL(X)
	STA RS.DPL(X)
	DEX
	BPL 10$

	RTS
	.PAGE
;
;STUNE
;	SUBROUTINE TO START A TUNE OR NOISE
;		A = TUNE NUMBER (0...)
;		X = VOICE NUMBER (1...8)
;
STUNE::	ASL			;SET UP INDEX INTO TUNE TABLE
	TAY
	DEX
	TXA
.IF	NE,...PRK		;CHECK IF START PRIORITY ENABLED
	PHA
	LDA	X,VITAB		;GET INDEX TO PROPER VOICE
	TAX
	LDA	X,VIU1		;CHECK IF VOICE IN USE
	BEQ	5$		;IF NOT IN USE, HAVE PRIORITY
	TYA
	CMP	X,VIU1		;CHECK IF HIGHER THAN VOICE IN USE
	BCC	5$		;IF IS (LOWER OR EQUAL TUNE #)
	PLA
	RTS			;ELSE, RETURN WITHOUT STARTING TUNE
;IF HERE, HAVE LOWER OR EQUAL TUNE # (HIGHER OR EQUAL PRIORITY), START TUNE
5$:	PLA
.ENDC
	ASL			;SET UP INDEX TO PKCUT ROUTINES
	TAX
	TYA
	PHA			;SAVE INDEX TO TUNE #, TEMP
	LDAH	STRET-1		;SET UP RETURN ADDRESS
	PHA
	LDAL	STRET-1
	PHA
	LDA	X,VKT+1		;PUSH PKCUT ROUTINE ADDRESS ONTO STACK
	PHA
	LDA	X,VKT
	PHA
	SEI			;DISABLE INTERRUPTS
	RTS			;DISPATCH TO CORRECT PKCUT ROUTINE
;RETURN HERE FROM DISPATCH TO PKCUT
STRET:	PLA			;GET BACK TUNE #
	TAY
	ORA	#1		;MAKE SURE NON-ZERO
	STA	X,VIU1		;STORE AS VOICE IN USE FLAG
	LDA	Y,TUNTAB
	STA	X,OPTR1		;SET UP NEW TUNE POINTER
	LDA	Y,TUNTAB+1
	STA	X,OPTR1+1
	CLI			;RE-ENABLE INTERRUPTS
	RTS			;RETURN, NEW TUNE/NOISE STARTED
;
.IF	NE,...PRK		;IF PRIORITY CUT OPTION
VITAB:	.BYTE	0,VSIZE,VSIZE*2,VSIZE*3,VSIZE*4,VSIZE*5,VSIZE*6,VSIZE*7
.ENDC
VKT:	.WORD	PKCUT1-1,PKCUT2-1,PKCUT3-1,PKCUT4-1
.IF	NE,...SV4
	.WORD	PKCUT5-1
.IF	GE,...PRI-2		;CHECK FOR 2 PRIORITY LEVELS
	.WORD	PKCUT6-1
.ENDC
.IF	GE,...PRI-3		;CHECK FOR PRIORITY 3
	.WORD	PKCUT7-1
.ENDC
.IF	GE,...PRI-4		;CHECK FOR PRIORITY 4
	.WORD	PKCUT8-1
.ENDC
.ENDC
.IF	EQ,...SV4
.IF	GE,...PRI-2
	.WORD	PKCUT5-1
.ENDC
.IF	GE,...PRI-3
	.WORD	PKCUT6-1
.ENDC
.IF	GE,...PRI-4
	.WORD	PKCUT7-1
.ENDC
.IF	GE,...PRI-5
	.WORD	PKCUT8-1
.ENDC
.ENDC
.IF	NE,...SV3
	.WORD	PKCUT8-1
.ENDC
;
	.PAGE
.IF	NE,...DRE
;
;RCS,RCN
;	SET OR RESET DYNAMIC RECONFIGURATION FLAG AND INIT ALL VOICES
;
RCS::
	LDA	#0		;ALL CHANNELS SEPERATE
	STA	PKC1
	STA	PKC2
	LDA	#1		;SET FLAG THAT ARE ALL 8-BIT VOICES NOW
	BNE	RECON
;
;RESET POKEYS BACK TO DEFAULT CONFIG...
RCN::
.IF	EQ,...SV3
.IF	EQ,...SV4
	LDA	#78		;VOICES 3 AND 4 ARE 16 BIT EACH
.ENDC
.IF	NE,...SV4
	LDA	#50		;VOICE 3 IS 16 BIT, VOICE 4 SPLIT INTO 2 8 BIT
.ENDC
.ENDC
.IF	NE,...SV3
.IF	EQ,...SV4
	LDA	#28		;VOICE 3 IS 2 8 BIT CHANNELS, VOICE 4 IS 16 BIT
.ENDC
.IF	NE,...SV4
	LDA	#0		;4 CHANNELS SEPERATE (3 AND 4 ARE DUAL 8 BIT)
.ENDC
.ENDC
	STA	PKC1
	LDA	#78
	STA	PKC2		;TIE CHANNEL 2 TO 1, 4 TO 3
;
	LDA	#0		;CLEAR FLAG (NORMAL CONFIGURATION)
;
RECON:	STA	DREF
	JSR	PKCUT1
	JSR	PKCUT2		;INIT. ALL VOICES TO NEW CONFIGURATION
	JSR	PKCUT3
	JSR	PKCUT4
	JSR	PKCUT5
	JSR	PKCUT6
	JSR	PKCUT7
	JSR	PKCUT8
	RTS
	.PAGE
.ENDC
;
;PKCUT1
;	SUB. TO INIT VOICE 1 (CUT IT OFF IF IN PROGRESS)
;
PKCUT1::
	LDAH	PKFL1
	STA	PKPTR+1		;STORE MSB'S OF POKEY OUTPUT
	LDAL	PKFL1
	STA	PKPTR
	LDX	#0
.IF	NE,...DRE
	LDA	DREF
	BEQ	5$
;IF HERE, ONLY AN 8-BIT VOICE...
	LDY	#1
	BNE	10$
.ENDC
5$:	LDY	#3		;OFFSET TO AMP. CONTROL
10$:	JSR	POKVI
	RTS
;
;PKCUT2
;	INIT. VOICE 2
;
PKCUT2::
	LDAH	PKFL2
	STA	PKPTR+1		;STORE MSB'S OF POKEY OUTPUT
	LDAL	PKFL2
	STA	PKPTR
	LDX	#...NBPV
.IF	NE,...DRE
	LDA	DREF
	BEQ	5$
;IF HERE, ONLY AN 8-BIT VOICE...
	LDY	#1
	BNE	10$
.ENDC
5$:	LDY	#3
10$:	JSR	POKVI
	RTS
;
;PKCUT3
;	SUB. TO INIT VOICE 3 (OR 3A)
;
PKCUT3::
	LDAH	PKFL3
	STA	PKPTR+1		;STORE MSB'S OF POKEY OUTPUT
	LDAL	PKFL3
	STA	PKPTR
	LDX	#...NBPV*2
.IF	EQ,...SV3		;IF NOT SPLIT VOICE
.IF	NE,...DRE
	LDA	DREF
	BEQ	5$
;IF HERE, ONLY AN 8-BIT VOICE...
	LDY	#1
	BNE	10$
.ENDC
5$:	LDY	#3
10$:	JSR	POKVI
.ENDC
.IF	NE,...SV3		;IF VOICE 3 SPLIT
	LDY	#1
	JSR	POKVI
	RTS
;
;PKCUT8
;	SUB. TO INIT VOICE 8 (3B)
;
PKCUT8::
	LDAH	PKFH3
	STA	PKPTR+1
	LDAL	PKFH3
	STA	PKPTR
	LDX	#...NBPV*7	;***THIS IS NOT GENERALIZED***
	LDY	#1
	JSR	POKVI		;INIT VOICE 3B
	RTS
.ENDC
;
;PKCUT4
;	SUB. TO INIT VOICE 4
;
PKCUT4::
	LDAH	PKFL4
	STA	PKPTR+1		;STORE MSB'S OF POKEY OUTPUT
	LDAL	PKFL4
	STA	PKPTR
	LDX	#...NBPV*3
.IF	EQ,...SV4		;IF NOT SPLIT VOICE
.IF	NE,...DRE
	LDA	DREF
	BEQ	5$
;IF HERE, ONLY AN 8-BIT VOICE...
	LDY	#1
	BNE	10$
.ENDC
5$:	LDY	#3
10$:	JSR	POKVI		;INIT. VOICE 4 (NON-SPLIT)
;11/23/82	-	Version 1.01
	RTS
.ENDC
.IF	NE,...SV4
	LDY	#1
	JSR	POKVI		;INIT VOICE 4A (SPLIT)
	RTS
;
;***CONFIGURED FOR 8 BIT PRIORITY (...SV4 <> 0)
;
;PKCUT5
;	SUB. TO INIT VOICE 5 (4B SPLIT VOICE)
;
PKCUT5::
	LDAH	PKFH4
	STA	PKPTR+1
	LDAL	PKFH4
	STA	PKPTR
	LDY	#1
	LDX	#...NBPV*4		;INIT VOICE 4B (SPLIT)
	JSR	POKVI
	RTS
.IF	GE,...PRI-2			;CHECK FOR 2 PRIORITY LEVELS
;
;PKCUT6
;	SUB TO INIT VOICE 6 (4B, PRI. 2)
;
PKCUT6::
	LDY	#1			;RE-INIT
	LDX	#...NBPV*5		;IF SO, INIT PRIORITY 2
.IF	NE,...DRE
	LDA	DREF
	BEQ	5$
;IF HERE, ARE RECONFIGURED FOR ALL 8-BIT CHANNELS, USE HALF OF VOICE 1
	LDAH	PKFH1
	STA	PKPTR+1
	LDAL	PKFH1
;12/13/82	Version 1.03
	STA	PKPTR
	JMP	10$
.ENDC
5$:	LDAH	PKFH4
	STA	PKPTR+1
	LDAL	PKFH4
	STA	PKPTR
10$:	JSR	POKVI
	RTS
.ENDC
.IF	GE,...PRI-3		;CHECK FOR PRIORITY 3
;
;PKCUT7
;
PKCUT7::
	LDY	#1
	LDX	#...NBPV*6
.IF	NE,...DRE
	LDA	DREF
	BEQ	5$
;IF HERE, ARE RECONFIGURED FOR ALL 8-BIT CHANNELS, USE HALF OF VOICE 2
	LDAH	PKFH2
	STA	PKPTR+1
	LDAL	PKFH2
;12/13/82	Version 1.03
	STA	PKPTR
	JMP	10$
.ENDC
5$:	LDAH	PKFH4
	STA	PKPTR+1
	LDAL	PKFH4
	STA	PKPTR
10$:	JSR	POKVI
	RTS
.ENDC
.IF	GE,...PRI-4		;CHECK FOR PRIORITY 4
;
;PKCUT8
;
PKCUT8::
	LDY	#1
	LDX	#...NBPV*7
.IF	NE,...DRE
	LDA	DREF
	BEQ	5$
;IF HERE, ARE RECONFIGURED FOR ALL 8-BIT CHANNELS, USE HALF OF VOICE 3
	LDAH	PKFH3
	STA	PKPTR+1
	LDAL	PKFH3
;12/13/82	Version 1.03
	STA	PKPTR
	JMP	10$
.ENDC
5$:	LDAH	PKFH4
	STA	PKPTR+1
	LDAL	PKFH4
	STA	PKPTR
10$:	JSR	POKVI
	RTS
.ENDC
.ENDC
;
;
;***CONFIGURED FOR 16 BIT PRIORITY (...SV4 = 0)
;
.IF	EQ,...SV4
.IF	GE,...PRI-2
;PKCUT5
;	SUB. TO INIT VOICE 5 (4, PRIORITY 2)
;
PKCUT5::
	LDX	#...NBPV*4
	LDY	#3			;ASSUME NOT DYNAMIC RECONFIGURATION
.IF	NE,...DRE
	LDA	DREF
	BEQ	5$
;IF HERE, ARE RECONFIGURED FOR ALL 8-BIT CHANNELS, USE HALF OF VOICE 4
	LDAH	PKFH4
	STA	PKPTR+1
	LDAL	PKFH4
	STA	PKPTR
	LDY	#1
	JMP	10$
.ENDC
5$:	LDAH	PKFL4
	STA	PKPTR+1
	LDAL	PKFL4
	STA	PKPTR
;
10$:	JSR	POKVI
	RTS
.ENDC
.IF	GE,...PRI-3
;
;PKCUT6
;	SUB TO INIT VOICE 6 (4, PRI. 3)
;
PKCUT6::
	LDY	#3			;RE-INIT
	LDX	#...NBPV*5		;IF SO, INIT PRIORITY 3
.IF	NE,...DRE
	LDA	DREF
	BEQ	5$
;IF HERE, ARE RECONFIGURED FOR ALL 8-BIT CHANNELS, USE HALF OF VOICE 1
	LDAH	PKFH1
	STA	PKPTR+1
	LDAL	PKFH1
;12/13/82	Version 1.03
	STA	PKPTR
	LDY	#1
	JMP	10$
.ENDC
5$:	LDAH	PKFL4
	STA	PKPTR+1
	LDAL	PKFL4
	STA	PKPTR
10$:	JSR	POKVI
	RTS
.ENDC
.IF	GE,...PRI-4		;CHECK FOR PRIORITY 4
;
;PKCUT7
;
PKCUT7::
	LDY	#3
	LDX	#...NBPV*6
.IF	NE,...DRE
	LDA	DREF
	BEQ	5$
;IF HERE, ARE RECONFIGURED FOR ALL 8-BIT CHANNELS, USE HALF OF VOICE 2
	LDAH	PKFH2
	STA	PKPTR+1
	LDAL	PKFH2
;12/13/82	Version 1.03
	STA	PKPTR
	LDY	#1
	JMP	10$
.ENDC
5$:	LDAH	PKFL4
	STA	PKPTR+1
	LDAL	PKFL4
	STA	PKPTR
10$:	JSR	POKVI
	RTS
.ENDC
.IF	GE,...PRI-5		;CHECK FOR PRIORITY 5
;
;PKCUT8
;
PKCUT8::
	LDY	#3
	LDX	#...NBPV*7
.IF	NE,...DRE
	LDA	DREF
	BEQ	5$
;IF HERE, ARE RECONFIGURED FOR ALL 8-BIT CHANNELS, USE HALF OF VOICE 3
	LDAH	PKFH3
	STA	PKPTR+1
	LDAL	PKFH3
;12/13/82	Version 1.03
	STA	PKPTR
	LDY	#1
	JMP	10$
.ENDC
5$:	LDAH	PKFL4
	STA	PKPTR+1
	LDAL	PKFL4
	STA	PKPTR
10$:	JSR	POKVI
	RTS
.ENDC
.ENDC
;
	.PAGE
	.SBTTL	RPM OUTPUT DRIVER ROUTINES
;
;PKOUT1
;	DRIVER TO OUTPUT POKEY VOICE 1
;
PKOUT1:	LDX	#0		;SET UP NO VARIABLE OFFSET
	LDAH	PKFL1
	STA	PKPTR+1		;STORE MSB'S OF POKEY OUTPUT
	LDAL	PKFL1
	STA	PKPTR
.IF	NE,...PRI
	LDA	#0
	STA	PRIF
.ENDC
.IF	NE,...SVV
.IF	EQ,...DRE
	LDA	#0		;TELL DRIVER NOT SPLIT VOICE
.ENDC
.IF	NE,...DRE
	LDA	DREF		;ELSE, TELL IF SPLIT OR NOT (USE DREF)
.ENDC
.ENDC
	JMP	POKOUT		;GO TO COMMON ROUTINE
;
;PKOUT2
;	DRIVER TO OUTPUT POKEY VOICE 2
;
PKOUT2:	LDX	#...NBPV	;OFFSET ALL VARIABLES TO SECOND VOICE
	LDAH	PKFL2
	STA	PKPTR+1		;STORE MSB'S OF POKEY OUTPUT
	LDAL	PKFL2
	STA	PKPTR
.IF	NE,...PRI
	LDA	#0
	STA	PRIF
.ENDC
.IF	NE,...SVV
.IF	EQ,...DRE
	LDA	#0		;TELL DRIVER NOT SPLIT VOICE
.ENDC
.IF	NE,...DRE
	LDA	DREF		;ELSE, TELL IF SPLIT OR NOT (USE DREF)
.ENDC
.ENDC
	JMP	POKOUT
;
;PKOUT3
;	SETUP FOR OUTPUT OF POKEY VOICE 3 (OR 3A)
;
PKOUT3:	LDX	#...NBPV*2	;OFFSET FOR POKEY VARIABLES
	LDAH	PKFL3
	STA	PKPTR+1		;STORE MSB'S OF POKEY OUTPUT
	LDAL	PKFL3
	STA	PKPTR
.IF	NE,...SV3
.IF	NE,...PRI
	LDA	#0
	STA	PRIF
.ENDC
	LDA	#1		;TELL ARE SPLIT VOICE
.ENDC
.IF	EQ,...SV3
.IF	NE,...PRI
	LDA	#0
	STA	PRIF
.ENDC
.IF	NE,...SVV
.IF	EQ,...DRE
	LDA	#0		;TELL DRIVER NOT SPLIT VOICE
.ENDC
.IF	NE,...DRE
	LDA	DREF		;ELSE, TELL IF SPLIT OR NOT (USE DREF)
.ENDC
.ENDC
.ENDC
	JMP	POKOUT
	.PAGE
;
;************************************************************************
;NON-SPLIT VOICE 4 PRIORITY OUTPUT ROUTINES (4-8)
;************************************************************************
...NBMF = 3
;
;PKOUT4
;	SETUP FOR OUTPUT OF POKEY VOICE 4 (OR 4A)
;
PKOUT4:	LDX	#...NBPV*...NBMF	;OFFSET FOR POKEY VARIABLES
	LDAH	PKFL4
	STA	PKPTR+1		;STORE MSB'S OF POKEY OUTPUT
	LDAL	PKFL4
	STA	PKPTR
.IF	NE,...PRI
	LDA	#0
	STA	PRIF
.ENDC
.IF	EQ,...SV4
.IF	NE,...SVV
.IF	EQ,...DRE
	LDA	#0		;TELL DRIVER NOT SPLIT VOICE
.ENDC
.IF	NE,...DRE
	LDA	DREF		;ELSE, TELL IF SPLIT OR NOT (USE DREF)
.ENDC
.ENDC
.ENDC
.IF	NE,...SV4
	LDA	#1		;TELL THAT THIS IS SPLIT VOICE
.ENDC
	JMP	POKOUT
...NBMF = ...NBMF+1
;
.IF	EQ,...SV4		;IF NOT SPLIT VOICE, 4A IS PRIORITIZED...
.IF	GE,...PRI-2		;AND HAVE MORE THAN 1 PRIORITY LEVEL...
;
;PKOUT5
;	PRIORITY 2 (LESS IMPORTANT) IF NOT SPLIT VOICE
;
PKOUT5:	LDX	#...NBPV*...NBMF	;OFFSET FOR POKEY VARIABLES
.IF	EQ,...DRE
	LDAH	PKFL4
	STA	PKPTR+1		;STORE MSB'S OF POKEY OUTPUT
	LDAL	PKFL4
	STA	PKPTR
	LDA	VIU4		;CHECK IF A HIGHER PRIORITY IN USE
	STA	PRIF		;IF VIU SET, HAVE A LOWER PRIORITY, IF
.ENDC
.IF	NE,...DRE
	LDA	DREF		;CHECK FOR RECONFIGURED TO 8 BITS
	BEQ	5$		;IF NOT
;IF HERE, 8-BIT VOICE (NO PRIORITY)
	LDA	#0
	STA	PRIF
	LDAH	PKFH4
	STA	PKPTR+1
	LDAL	PKFH4
	STA	PKPTR
	LDA	#1
	JMP	POKOUT
;IF HERE, 2ND PRIORITY 16-BIT VOICE
5$:	LDAH	PKFL4
	STA	PKPTR+1		;STORE MSB'S OF POKEY OUTPUT
	LDAL	PKFL4
	STA	PKPTR
	LDA	VIU4		;CHECK IF A HIGHER PRIORITY IN USE
	STA	PRIF		;IF VIU SET, HAVE A LOWER PRIORITY, IF
	LDA	#0		;TELL NOT A SPLIT VOICE
.ENDC
	JMP	POKOUT		;   NOT, WE HAVE A HIGHEST PRIORITY
...NBMF = ...NBMF+1
;	
.ENDC
.IF	GE,...PRI-3
;
;PKOUT6
;	PRIORITY 3 IF NOT SPLIT VOICE
;
PKOUT6:	LDX	#...NBPV*...NBMF	;OFFSET FOR POKEY VARIABLES
.IF	EQ,...DRE
	LDAH	PKFL4
	STA	PKPTR+1		;STORE MSB'S OF POKEY OUTPUT
	LDAL	PKFL4
	STA	PKPTR
	LDA	VIU4		;CHECK IF A HIGHER PRIORITY IN USE
	ORA	VIU5		;   (EITHER PRI. 1 OR 2)
	STA	PRIF		;IF VIU SET, HAVE A LOWER PRIORITY, IF
.ENDC
.IF	NE,...DRE
	LDA	DREF		;CHECK FOR RECONFIGURED TO 8 BITS
	BEQ	5$		;IF NOT
;IF HERE, 8-BIT VOICE (NO PRIORITY)
	LDA	#0
	STA	PRIF
	LDAH	PKFH1
	STA	PKPTR+1
	LDAL	PKFH1
	STA	PKPTR
	LDA	#1
	JMP	POKOUT
;IF HERE, 2ND PRIORITY 16-BIT VOICE
5$:	LDAH	PKFL4
	STA	PKPTR+1		;STORE MSB'S OF POKEY OUTPUT
	LDAL	PKFL4
	STA	PKPTR
	LDA	VIU4		;CHECK IF A HIGHER PRIORITY IN USE
	ORA	VIU5
	STA	PRIF		;IF VIU SET, HAVE A LOWER PRIORITY, IF
	LDA	#0		;TELL NOT A SPLIT VOICE
.ENDC
	JMP	POKOUT		;   NOT, WE HAVE A HIGHEST PRIORITY
...NBMF = ...NBMF+1
;
.ENDC
.IF	GE,...PRI-4
;
;PKOUT7
;	PRIORITY 4 IF NOT SPLIT VOICE
;
PKOUT7:	LDX	#...NBPV*...NBMF	;OFFSET FOR POKEY VARIABLES
.IF	EQ,...DRE
	LDAH	PKFL4
	STA	PKPTR+1		;STORE MSB'S OF POKEY OUTPUT
	LDAL	PKFL4
	STA	PKPTR
	LDA	VIU4		;CHECK IF A HIGHER PRIORITY IN USE
	ORA	VIU5		;   (EITHER PRI. 1,2 OR 3)
	ORA	VIU6
	STA	PRIF		;IF VIU SET, HAVE A LOWER PRIORITY, IF
.ENDC
.IF	NE,...DRE
	LDA	DREF		;CHECK FOR RECONFIGURED TO 8 BITS
	BEQ	5$		;IF NOT
;IF HERE, 8-BIT VOICE (NO PRIORITY)
	LDA	#0
	STA	PRIF
	LDAH	PKFH2
	STA	PKPTR+1
	LDAL	PKFH2
	STA	PKPTR
	LDA	#1
	JMP	POKOUT
;IF HERE, 2ND PRIORITY 16-BIT VOICE
5$:	LDAH	PKFL4
	STA	PKPTR+1		;STORE MSB'S OF POKEY OUTPUT
	LDAL	PKFL4
	STA	PKPTR
	LDA	VIU4		;CHECK IF A HIGHER PRIORITY IN USE
	ORA	VIU5
	ORA	VIU6
	STA	PRIF		;IF VIU SET, HAVE A LOWER PRIORITY, IF
	LDA	#0		;TELL NOT A SPLIT VOICE
.ENDC
	JMP	POKOUT		;   NOT, WE HAVE A HIGHEST PRIORITY
...NBMF = ...NBMF+1
;
.ENDC
.IF	GE,...PRI-5
;
;PKOUT8
;	PRIORITY 5 IF NOT SPLIT VOICE
;
PKOUT8:	LDX	#...NBPV*...NBMF	;OFFSET FOR POKEY VARIABLES
.IF	EQ,...DRE
	LDAH	PKFL4
	STA	PKPTR+1		;STORE MSB'S OF POKEY OUTPUT
	LDAL	PKFL4
	STA	PKPTR
	LDA	VIU4		;CHECK IF A HIGHER PRIORITY IN USE
	ORA	VIU5		;   (EITHER PRI. 1,2 OR 3)
	ORA	VIU6
	ORA	VIU7
	STA	PRIF		;NOT PRIORITY
.ENDC
.IF	NE,...DRE
	LDA	DREF		;CHECK FOR RECONFIGURED TO 8 BITS
	BEQ	5$		;IF NOT
;IF HERE, 8-BIT VOICE (NO PRIORITY)
	LDA	#0
	STA	PRIF
	LDAH	PKFH3
	STA	PKPTR+1
	LDAL	PKFH3
	STA	PKPTR
	LDA	#1
	JMP	POKOUT
;IF HERE, 2ND PRIORITY 16-BIT VOICE
5$:	LDAH	PKFL4
	STA	PKPTR+1		;STORE MSB'S OF POKEY OUTPUT
	LDAL	PKFL4
	STA	PKPTR
	LDA	VIU4		;CHECK IF A HIGHER PRIORITY IN USE
	ORA	VIU5
	ORA	VIU6
	ORA	VIU7
	STA	PRIF		;IF VIU SET, HAVE A LOWER PRIORITY, IF
	LDA	#0		;TELL NOT A SPLIT VOICE
.ENDC
	JMP	POKOUT
;
.ENDC
.ENDC
;
;***********************************************************************
;SPLIT VOICE 4 PRIORITY OUTPUT ROUTINES (5-8)
;***********************************************************************
.IF	NE,...SV4
;
;PKOUT5
;	SETUP FOR OUTPUT OF POKEY VOICE 4B (PRIORITY 1, MOST IMPORTANT)
;
PKOUT5:	LDX	#...NBPV*...NBMF	;OFFSET FOR POKEY VARIABLES
	LDAH	PKFH4
	STA	PKPTR+1		;STORE MSB'S OF POKEY OUTPUT
	LDAL	PKFH4
	STA	PKPTR
.IF	NE,...PRI
	LDA	#0
	STA	PRIF		;SET HIGHEST PRIORITY
.ENDC
	LDA	#1		;TELL THAT THIS IS SPLIT VOICE
	JMP	POKOUT
...NBMF = ...NBMF+1
;
.IF	GE,...PRI-2		;IF HAVE AT LEAST 2 PRIORITY LEVELS
;
;PKOUT6
;	PRIORITY 2 IF SPLIT VOICE
;
PKOUT6:	LDX	#...NBPV*...NBMF	;OFFSET FOR POKEY VARIABLES
.IF	EQ,...DRE
	LDAH	PKFH4
	STA	PKPTR+1		;STORE MSB'S OF POKEY OUTPUT
	LDAL	PKFH4
	STA	PKPTR
	LDA	VIU5		;CHECK IF A HIGHER PRIORITY IN USE
	STA	PRIF		;IF VIU SET, HAVE A LOWER PRIORITY, IF
				;   NOT, WE HAVE A HIGHEST PRIORITY
.ENDC
.IF	NE,...DRE
	LDA	DREF		;CHECK FOR RECONFIGURED TO 8 BITS
	BEQ	5$		;IF NOT
;IF HERE, 8-BIT VOICE (NO PRIORITY)
	LDA	#0
	STA	PRIF
	LDAH	PKFH1
	STA	PKPTR+1
	LDAL	PKFH1
	STA	PKPTR
	LDA	#1
	JMP	POKOUT
;IF HERE, 2ND PRIORITY 8-BIT VOICE
5$:	LDAH	PKFH4
	STA	PKPTR+1		;STORE MSB'S OF POKEY OUTPUT
	LDAL	PKFH4
	STA	PKPTR
	LDA	VIU5		;CHECK IF A HIGHER PRIORITY IN USE
	STA	PRIF		;IF VIU SET, HAVE A LOWER PRIORITY, IF
.ENDC
	LDA	#1		;SET THAT SPLIT VOICE
	JMP	POKOUT
...NBMF = ...NBMF+1
;
.ENDC
.IF	GE,...PRI-3		;IF HAVE AT LEAST 3 PRIORITY LEVELS
;
;PKOUT7
;	PRIORITY 3 IF SPLIT VOICE
;
PKOUT7:	LDX	#...NBPV*...NBMF	;OFFSET FOR POKEY VARIABLES
.IF	EQ,...DRE
	LDAH	PKFH4
	STA	PKPTR+1		;STORE MSB'S OF POKEY OUTPUT
	LDAL	PKFH4
	STA	PKPTR
	LDA	VIU5		;CHECK IF A HIGHER PRIORITY IN USE
	ORA	VIU6		;   (PRIORITY 1 AND 2)
	STA	PRIF		;IF VIU SET, HAVE A LOWER PRIORITY, IF
				;   NOT, WE HAVE A HIGHEST PRIORITY
.ENDC
.IF	NE,...DRE
	LDA	DREF		;CHECK FOR RECONFIGURED TO 8 BITS
	BEQ	5$		;IF NOT
;IF HERE, 8-BIT VOICE (NO PRIORITY)
	LDA	#0
	STA	PRIF
	LDAH	PKFH2
	STA	PKPTR+1
	LDAL	PKFH2
	STA	PKPTR
	LDA	#1
	JMP	POKOUT
;IF HERE, 3RD PRIORITY 8-BIT VOICE
5$:	LDAH	PKFH4
	STA	PKPTR+1		;STORE MSB'S OF POKEY OUTPUT
	LDAL	PKFH4
	STA	PKPTR
	LDA	VIU5		;CHECK IF A HIGHER PRIORITY IN USE
	ORA	VIU6
	STA	PRIF		;IF VIU SET, HAVE A LOWER PRIORITY, IF
.ENDC
	LDA	#1		;SET THAT SPLIT VOICE
	JMP	POKOUT
...NBMF = ...NBMF+1
;
.ENDC
.IF	GE,...PRI-4		;IF HAVE AT LEAST 4 PRIORITY LEVELS
;
;PKOUT8
;	PRIORITY 4 IF SPLIT VOICE
;
PKOUT8:	LDX	#...NBPV*...NBMF	;OFFSET FOR POKEY VARIABLES
.IF	EQ,...DRE
	LDAH	PKFH4
	STA	PKPTR+1		;STORE MSB'S OF POKEY OUTPUT
	LDAL	PKFH4
	STA	PKPTR
	LDA	VIU5		;CHECK IF A HIGHER PRIORITY IN USE
	ORA	VIU6		;	(PRI. 1,2 AND 3)
	ORA	VIU7
	STA	PRIF		;IF VIU SET, HAVE A LOWER PRIORITY, IF
				;   NOT, WE HAVE A HIGHEST PRIORITY
.ENDC
.IF	NE,...DRE
	LDA	DREF		;CHECK FOR RECONFIGURED TO 8 BITS
	BEQ	5$		;IF NOT
;IF HERE, 8-BIT VOICE (NO PRIORITY)
	LDA	#0
	STA	PRIF
	LDAH	PKFH3
	STA	PKPTR+1
	LDAL	PKFH3
	STA	PKPTR
	LDA	#1
	JMP	POKOUT
;IF HERE, 2ND PRIORITY 8-BIT VOICE
5$:	LDAH	PKFH4
	STA	PKPTR+1		;STORE MSB'S OF POKEY OUTPUT
	LDAL	PKFH4
	STA	PKPTR
	LDA	VIU5		;CHECK IF A HIGHER PRIORITY IN USE
	ORA	VIU6
	ORA	VIU7
	STA	PRIF		;IF VIU SET, HAVE A LOWER PRIORITY, IF
.ENDC
	LDA	#1		;SET THAT SPLIT VOICE
	JMP	POKOUT
...NBMF = ...NBMF+1
;
.ENDC
.ENDC
.IF	NE,...SV3		;IF VOICE 3 SPLIT, BECOMES VOICE 8
;
;PKOUT8
;	VOICE 3B IF SPLIT VOICE 3
;
PKOUT8:	LDX	#...NBPV*...NBMF	;OFFSET FOR POKEY VARIABLES
	LDAH	PKFH3
	STA	PKPTR+1		;STORE MSB'S OF POKEY OUTPUT
	LDAL	PKFH3
	STA	PKPTR
.IF	NE,...PRI
	LDA	#0
	STA	PRIF		;SET ONLY PRIORITY (HIGHEST)
.ENDC
	LDA	#1		;SET THAT SPLIT VOICE
;
.ENDC
	.PAGE
;
;POKOUT
;	COMMON OUTPUT ROUTINE FOR ALL POKEY VOICES
;	X = OFFSET TO CURRENT VOICE VARIABLES
;	A = SPLIT VOICE FLAG (IF SPLIT VOICE ENABLED)
;
POKOUT:
.IF	NE,...SVV
	STA	SVF		;STORE CURRENT SPLIT VOICE FLAG
.ENDC
	LDA	X,VIU1		;CHECK FOR VOICE IN USE
	BNE	3$		;IF HAVE A TUNE IN PROGRESS
	RTS			;ELSE, RETURN
;
3$:	LDA	X,OPTR1		;SET UP COMMON 0 PAGE POINTERS
	STA	OPTRC
	LDA	X,OPTR1+1
	STA	OPTRC+1
.IF	NE,...FRE
	LDA	X,FPTR1
	STA	FPTRC
	LDA	X,FPTR1+1
	STA	FPTRC+1
.ENDC
.IF	NE,...AME
	LDA	X,APTR1
	STA	APTRC
	LDA	X,APTR1+1
	STA	APTRC+1
.ENDC
;
;SEE IF TIME TO UPDATE CURRENT NOTE
	INC	X,VSEQ1		;INC. ENVELOPE SEQ. COUNT
	BNE	5$		;IF NOT AT END OF ENV. YET
	DEC	X,VSEQ1		;ELSE, KEEP AT FINAL ENV. COUNT
5$:	SEC
	LDA	X,ODUR1		;GET LSB'S OF NOTE DURATION
	SBC	X,ORATE1
	STA	X,ODUR1
	BCC	7$		;IF MUST DEC. MSB'S
	JMP	POKSN1		;IF DONT DEC. MSB, SAME NOTE
7$:	DEC	X,ODUR1+1	;IF BORROW, DEC. MSB'S OF DURATION
	BMI	POKNL1		;IF HAVE A NEW NOTE
	JMP	POKSN1		;IF STILL SAME NOTE
;IF HERE, HAVE A NEW NOTE TO PLAY
POKNL1:	LDY	X,VSN1		;GET CURRENT SEQ. #
	INC	X,VSN1		;INC. TO NEXT NOTE IN TUNE
	INC	X,VSN1
	BNE	20$		;IF NO POINTER OVERFLOW
	INC	X,OPTR1+1	;INC. READ POINTER (NXT NOTE) BY 256 BYTES
20$:	LDA	NY,OPTRC	;GET NEXT NOTE IN TUNE
	BPL	25$
	JMP	PKFUN1		;IF A FUNCTION
;IF HERE, HAVE A NOTE, GET IT
25$:	BEQ	9$		;IF NOTE IS A REST (NO OUTPUT)
	CLC
	ADC	X,OKEY1		;POSITION NOTE TO CURRENT KEY
9$:	STY	FASV		;SAVE Y TEMP.
.IF	NE,...SVV		;IF SPLIT VOICE ENABLED...
	LDY	SVF
	BEQ	68$
;12/9/82	Version 1.02
.IF	NE,...SYM		;CHECK IF SYNTH. MODE
	PHA			;SAVE NEW VALUE, TEMP.
	SEC
	SBC	X,ONOTE1	;SUB. PREVIOUS NOTE
	STA	X,VSA1		;STORE RESULT FOR SYNTH. MODE
	BPL	91$		;IF VALUE POS.
	LDA	#0FF		;ELSE, SET MSB'S TO NEG.
	BNE	92$
91$:	LDA	#0
92$:	STA	X,VSA1+1
	PLA			;GET BACK. NEW NOTE VALUE	
.ENDC
	STA	X,ONOTE1	;ELSE, DON'T PERFORM TABLE LOOKUP,
	LDA	#0		;   USE VALUE DIRECTLY
	STA	X,ONOTE1+1	;8 BIT VALUE ONLY...
	BEQ	69$
.ENDC
68$:	ASL			;SHIFT SO HAVE WORD OFFSET
	TAY
;
.IF	NE,...SYM		;IF SYNTH. MODE ENABLED...
	SEC			;COMPUTE DIFF. BETWEEN NEW AND OLD
	LDA	X,ONOTE1	;GET OLD NOTE VALUE
	SBC	Y,NOTTAB	;SUB. NEW NOTE VALUE
	STA	X,VSA1
	LDA	X,ONOTE1+1
	SBC	Y,NOTTAB+1
	STA	X,VSA1+1	;STORE DIFF. BETWEEN NEW AND OLD FOR SYNTH MODE
.ENDC
;
	LDA	Y,NOTTAB
	STA	X,ONOTE1	;STORE AS OUTPUT NOTE
	LDA	Y,NOTTAB+1
	STA	X,ONOTE1+1
69$:	LDY	FASV		;RESTORE Y
	INY			;INC. TO NOTE DURATION
;
	LDA	#0
	STA	FASV		;CLEAR LSB'S OF DURATION (WILL MOVE INTO ODUR1)
	LDA	NY,OPTRC	;GET CURRENT DURATION
	BNE	30$		;IF NOT AT FINAL NOTE
;CHECK FOR ENDING SUB-PHRASE OR MAIN TUNE
	LDA	X,OPTSV1	;CHECK SUB-PHRASE CALLING ADDR (FLAG)
	BEQ	29$		;IF AT END OF MAIN PHRASE
;IF HERE, RETURNING FROM SUB-PHRASE
	STA	X,OPTR1		;STORE "SAVED" ADDRESS
	STA	OPTRC
	LDA	X,OPTSV1+1
	STA	X,OPTR1+1
	STA	OPTRC+1
	LDA	#0
	STA	X,OPTSV1	;RESET SUB-PHRASE FLAG
	LDA	X,VSNSV1	;GET BACK "SAVED" SEQ. NUMBER
	STA	X,VSN1
	JMP	POKNL1
;IF HERE, ARE AT END OF THIS VOICE'S TUNE, RESET	
29$:
.IF	NE,...SVV
	LDY	SVF
	BNE	67$
	LDY	#3		;SET UP INC. FOR NON-SPLIT VOICE
.ENDC
67$:	JSR	POKVI		;INITIALIZE THIS VOICE
	RTS
;IF HERE, STILL HAVE A NEW NOTE, GET AND STORE DURATION
30$:	LSR			;SHIFT AND REMOVE LSB (TIED NOTE FLAG)
	LSR			;MULT. DUR * 64 (CARRY IS MSB OF LSB BYTE)
	ROR	FASV		;ROTATE INTO LSB'S
	PHA			;SAVE MSB'S
	CLC
	LDA	FASV
	ADC	X,ODUR1		;SUBTRACT ANY OVERRUN FROM PREV. NOTE
	STA	X,ODUR1
	PLA
	ADC	X,ODUR1+1
	STA	X,ODUR1+1	;STORE MSB'S OF DURATION
	LDA	X,ODUR1		;GET BACK LSB'S
	SEC
	SBC	#0FF		;SUBTRACT 1
	STA	X,ODUR1
	LDA	X,ODUR1+1
	SBC	#0FF
	STA	X,ODUR1+1
;
.IF	NE,...CNT		;IF NOTE COUNTER ENABLED...
	INC	X,VCNT1		;INC. NOTE COUNT
.ENDC
;
	LDA	NY,OPTRC	;GET BACK DURATION
	AND	#01		;TEST IF NOTE IS TIED
	BNE	50$		;IF NOTE IS TIED, PLAY IT
	STA	X,VSEQ1		;CLEAR SEQ. COUNTER FOR NOT TIED NOTE
.IF	NE,...SYM
	STA	X,VSA1
	STA	X,VSA1+1	;CLEAR SYNTH MODE ADJUST (NOT TIED)
.ENDC
.IF	NE,...PRI
	LDA	PRIF		;TEST IF THIS IS NOT HIGH PRIORITY
	BEQ	PKNOFF		;IF THIS IS HIGH PRIORITY FOR THIS VOICE
	RTS			;ELSE, DON'T UPDATE POKEY WITH THIS VOICE
.ENDC
.IF	EQ,...PRI
	JMP	PKNOFF		;TURN OFF NOTE (NOT TIED)
.ENDC
;IF HERE, NOTE IS TIED, TEST FOR SYNTH MODE ON
50$:
.IF	NE,...SYM
	LDA	X,VSF1		;TEST SYNTH MODE FLAG
	BNE	POKSN1		;IF SYNTH MODE ON
;IF HERE, NOTE IS TIED AND SYNTH MODE NOT ON, CLEAR FREQ. ADJUSTMENT
	STA	X,VSA1
	STA	X,VSA1+1	;CLEAR SYNTH. ADJUST
.ENDC
;IF HERE, HAVE SAME NOTE AS LAST TIME, PLAY IT WITH ENVELOPES
POKSN1:
.IF	NE,...PRI		;IF PRIORITY OF CHANNEL 4 ENABLED...
	LDA	PRIF
	BEQ	61$		;IF AT HIGHEST PRIORITY, PLAY NOTE
	RTS			;ELSE, RETURN WITHOUT POKEY UPDATE
.ENDC
61$:
.IF	NE,...SYM
	LDA	$INTCT
	AND	#06		;TEST TO SEE IF TIME TO CHANGE ADJUST
	BNE	3$
	CLC			;ASSUME # TO SHIFT IS POS.
	LDA	X,VSA1+1	;CHECK FOR POS. OR NEG. NUMBER
	BPL	2$		;IF NUM POS, CARRY CLEAR
	SEC			;NUM NEG. SHIFT IN A SIGN BIT
2$:	ROR	X,VSA1+1	;DIVIDE SYNTH ADJUST BY 2
	ROR	X,VSA1		;   SO ADD 1/2 AS MUCH EACH TIME
.ENDC
;FIRST ADD FREQ. ENV. TO NOTE FREQ.
3$:
.IF	NE,...FRE		;IF FREQ. ENV. ENABLED...
	LDA	X,VSEQ1		;GET FREQ. ENV. SEQ. #
	LSR			;FOR 128 BYTE TABLE
	TAY
	LDA	NY,FPTRC	;GET CURRENT FREQ. ENV. SETTING
	BPL	5$		;IF FREQ. ENV. POS
	LDY	#0FF		;SET Y TO NEG NUM MSB'S
	JMP	7$
5$:	LDY	#0		;SET Y TO POS NUM MSB'S
7$:	STY	FASV
.IF	NE,...SVV		;IF SPLIT VOICE ENABLED...
	LDY	SVF		;TEST FOR AN 8-BIT VOICE
	BNE	78$		;IF A SPLIT VOICE
.ENDC
	ASL			;MULT. ENV. * 8 FOR MUSIC
	ROL	FASV
	ASL
	ROL	FASV
	ASL
	ROL	FASV		;MULT FREQ. ENV. *8
78$:	LDY	FASV
.ENDC
.IF	EQ,...FRE
	LDA	#0		;CLEAR ANY FREQ. ADJUSTMENT VALUES
	LDY	#0		;   (FREQ. ENV. NOT ENABLED)
.ENDC
	CLC
	ADC	X,ONOTE1	;COMPUTE LSB'S OF OUTPUT FREQ.
	STA	FASV		;SAVE RESULT, TEMP
	TYA			;GET MSB OF FREQ. ENV (0 OR FF)
	ADC	X,ONOTE1+1	;COMPUTE MSB VALUE
.IF	NE,...SYM		;IF SYNTH. MODE ENABLED...
	TAY			;SAVE MSB'S TEMP
;NOW ADD SYNTH ADJUST TO SUM OF NOTE FREQ. AND ENV.
	CLC
	LDA	FASV		;GET BACK LSB'S
	ADC	X,VSA1		;ADD WITH SYNTH ADJUST
	STA	FASV		;SAVE BACK LSB'S
	TYA
	ADC	X,VSA1+1	;COMPUTE FINAL FREQ. MSB VALUE
.ENDC
.IF	NE,...SVV		;IF SPLIT VOICE ENABLED...
	LDY	SVF
	BEQ	62$		;IF NOT SPLIT VOICE
	LDY	#0
	BEQ	63$		;STORE ONLY LSB'S INTO POKEY
.ENDC
62$:	LDY	#2
	STA	NY,PKPTR	;STORE MSB'S OF NOTE
	DEY
	DEY
63$:	LDA	FASV		;GET BACK LSB'S OF NOTE FREQ.
	STA	NY,PKPTR	;STORE LSB'S OF NOTE
	LDA	X,ONOTE1	;CHECK FOR A REST (NO OUTPUT)
	ORA	X,ONOTE1+1
	BNE	PKNON		;IF NOT A REST
;IF HERE, HAVE A REST OR NOTE IS OFF, SET UP TO FORCE OUTPUT TO OFF
PKNOFF:	LDA	#0F0
	STA	FASV		;STORE MASK TO ZERO OUT AMPLITUDE
	JMP	PKNC
;NOW OUTPUT AMPLITUDE, THIS VOICE
PKNON:	LDA	#0FF		;SET UP MASK TO PERMIT CURRENT VOLUME
	STA	FASV
PKNC:
.IF	NE,...AME		;IF AMP. ENVELOPE ENABLED...
	LDA	X,VSEQ1		;DIVIDE ENV. SEQ # BY 8 (32 BYTE ENV. TABLE)
	LSR
	LSR
	LSR
	TAY
	LDA	X,VVOL1
	CLC
	ADC	NY,APTRC	;GET CURRENT VOLUME ENV. ADJ.
	BPL	5$		;IF NUM NOT .LT. 0
	LDA	#0		;ELSE, SET VOLUME TO OFF
5$:	CMP	#10		;CHECK FOR VOLUME TOO LARGE
	BMI	6$		;IF VOLUME OK
	LDA	#0F		;ELSE, SET TO MAX.
6$:
.ENDC
.IF	EQ,...AME		;IF AMP. ENV. DISABLED, JUST GET VOLUME
	LDA	X,VVOL1
.ENDC
	ORA	X,VAC1		;SET UP CURRENT VOICE CONTROL
	AND	FASV		;MASK WITH NOTE ON/OFF SETTING
.IF	NE,...SVV
	LDY	SVF
	BNE	66$		;IF THIS VOICE SPLIT
.ENDC
	LDY	#3
66$:	STA	NY,PKPTR	;TURN ON NOTE VOL.
	RTS
;IF HERE, HAVE A FUNCTION, NOT A NOTE...
PKFUN1:	INY
	STX	FASV		;SAVE OFFSET, TEMP
	AND	#0F		;KEEP ONLY VALID DISPATCH #'S
	ASL			;COMPUTE DISPATCH TABLE ADDR.
	TAX
;
	LDA	X,PKDT+1	;POSITION INTO DISP. TABLE
	PHA			;PUSH ONTO STACK
	LDA	X,PKDT
	PHA
	LDX	FASV		;RESTORE X REG.
	LDA	NY,OPTRC	;GET VALUE FOR ALL ROUTINES
	LDY	X,OPTR1+1	;XFER INTO COMMON POINTER (IN CASE
	STY	OPTRC+1		;   INC. OCCURED TO MSB'S)
	RTS			;DISPATCH TO APPROPRIATE FUNCTION
;
;
PKDT:	.WORD	PKARAT-1,PKCRAT-1
	.WORD	PKAAMP-1,PKCAMP-1
	.WORD	PKAKEY-1,PKCKEY-1
.IF	NE,...FRE
	.WORD	PKFRQE-1
.ENDC
.IF	EQ,...FRE
	.WORD	POKNL1-1	;IF FREQ. ENV. DISABLED...
.ENDC
.IF	NE,...AME
	.WORD	PKAMPE-1
.ENDC
.IF	EQ,...AME
	.WORD	POKNL1-1
.ENDC
.IF	NE,...SCK
	.WORD	PKCHK-1,PKRCHK-1
.ENDC
.IF	EQ,...SCK
	.WORD	POKNL1-1,POKNL1-1
.ENDC
	.WORD	PKCON-1,PKPKC-1
.IF	NE,...SYM
	.WORD	PKSYN-1
.ENDC
.IF	EQ,...SYM
	.WORD	POKNL1-1
.ENDC
	.WORD	PKCPH-1
	.WORD	PKSL-1,PKEL-1
;
	.PAGE
.IF	NE,...SCK		;IF SYNC. CHECK ENABLED
;
;IF HERE, HAVE A TIMING CHECK FUNCTION, WAIT FOR OTHER VOICES TO CATCH UP
PKCHK:	PHA			;SAVE A TEMP.
	LDA	X,OCHKM1	;GET CHECK MASK (THIS VOICE)
	STA	X,OCHK1		;SET CURRENT VOICE HAS REACHED CHECK POINT
	PLA			;GET BACK MASK OF ALL VOICES TO CHECK
	AND	OCHK1		;CHECK IF ALL VOICES REACHED CHECK POINT
	AND	OCHK2
	AND	OCHK3
	AND	OCHK4
	AND	OCHK5
	AND	OCHK6
	AND	OCHK7
	AND	OCHK8
	BNE	10$		;IF NOT ALL CHECK POINTS REACHED YET
	JMP	POKNL1		;IF ALL CHECK POINTS REACHED
;IF HERE, THIS VOICE AHEAD OF REST, WAIT FOR OTHERS
10$:	LDA	X,VSN1		;CHECK IF AT BYTE BOUNDARY
	BNE	11$
	DEC	X,OPTR1+1
	LDA	X,OPTR1+1
	STA	OPTRC+1
;
11$:	DEC	X,VSN1		;DEC. BACK TO THIS FUNCTION AGAIN
	DEC	X,VSN1
	LDA	#0
	STA	X,ODUR1
	STA	X,ODUR1+1	;CLEAR CURRENT DURATION (SO WILL BE NEW AGAIN)
	RTS			;RETURN FROM POKEY DRIVER, THIS VOICE
;
;IF HERE, WANT TO RESET CHECK FLAG, THIS CHANNEL
PKRCHK:	LDA	#0FF		;RESET MASK, THIS VOICE REACHED CHECK
	STA	X,OCHK1
	JMP	POKNL1
.ENDC
.IF	NE,...AME		;IF AMP. ENV. ENABLED...
;IF HERE, HAVE AN AMPLITUDE ENV. FUNCTION
PKAMPE:	ASL			;COMPUTE ADDR. OF AMP. ENV.
	TAY
	LDA	Y,AETAB		;GET ADDR. OF ENV. SELECTED
	STA	X,APTR1
	STA	APTRC
	LDA	Y,AETAB+1
	STA	X,APTR1+1
	STA	APTRC+1
	JMP	POKNL1
.ENDC
.IF	NE,...FRE		;IF FREQ. ENV. ENABLED...
;IF HERE, HAVE A FREQ. FUNCITON
PKFRQE:	ASL
	TAY
	LDA	Y,FETAB
	STA	X,FPTR1
	STA	FPTRC
	LDA	Y,FETAB+1
	STA	X,FPTR1+1
	STA	FPTRC+1
	JMP	POKNL1
.ENDC
;IF HERE, HAVE A RATE FUNCTION
PKCRAT:	CLC			;IF HERE, ADD NEW TO OLD
	ADC	X,ORATE1
PKARAT:	STA	X,ORATE1	;IF ENTER HERE, ONLY STORE NEW
	JMP	POKNL1
;IF HERE, HAVE A NEW MEDIAN AMPLITUDE
PKCAMP:	CLC			;IF HERE, ADD NEW TO OLD
	ADC	X,VVOL1
PKAAMP:	STA	X,VVOL1		;IF HERE, STORE NEW
	JMP	POKNL1
;IF HERE, HAVE A NEW KEY OFFSET
PKCKEY:	CLC			;ADD NEW TO OLD...
	ADC	X,OKEY1
PKAKEY:	STA	X,OKEY1
	JMP	POKNL1
;IF HERE, HAVE NEW VOICE CONTROL BITS
PKCON:	STA	X,VAC1		;STORE INTO VOICE CONTROL BITS
	JMP	POKNL1
;IF HERE, WANT TO SET UP NEW POKEY CONTROL BITS (FOR POKEY 1)
PKPKC:	STA	PKC1		;STORE INTO POKEY 1
	JMP	POKNL1
.IF	NE,...SYM		;IF SYNTH. MODE ENABLED...
;IF HERE, WANT TO SET OR RESET SYNTH MODE
PKSYN:	STA	X,VSF1		;STORE INTO SYNTH. FLAG
	JMP	POKNL1
.ENDC
;IF HERE, WANT TO CALL A SUB-PHRASE
PKCPH:	ASL			;SET UP ADDRESS FOR SUB-PHRASE
	TAY
	LDA	X,VSN1		;SAVE CALLING ADDRESS & COUNT
	STA	X,VSNSV1
	LDA	X,OPTR1
	STA	X,OPTSV1
	LDA	X,OPTR1+1
	STA	X,OPTSV1+1
	LDA	Y,TUNTAB
	STA	X,OPTR1
	STA	OPTRC
	LDA	Y,TUNTAB+1
	STA	X,OPTR1+1
	STA	OPTRC+1
	LDA	#0
	STA	X,VSN1		;CLEAR SEQ. COUNTER (START AT BEGINNING
	JMP	POKNL1		;   OF SUB-PHRASE)
;IF HERE, WANT TO START A PHRASE LOOP
PKSL:	STA	X,VLC1		;SAVE LOOP COUNT FOR THIS PHRASE
	LDA	X,VSN1
	STA	X,VSNLL1	;SAVE TUNE SEQ. COUNT AND ADDR. OF
	LDA	X,OPTR1		;   START OF LOOP
	STA	X,OPTLL1
	LDA	X,OPTR1+1
	STA	X,OPTLL1+1
	JMP	POKNL1
;IF HERE, WANT TO END A PHRASE LOOP
PKEL:	DEC	X,VLC1		;CHECK FOR DONE WITH LOOP
	BNE	10$		;IF NOT DONE WITH LOOP
	JMP	POKNL1		;IF ARE, CONTINUE WITH TUNE FROM HERE
;IF HERE, ARE NOT DONE YET WITH LOOP, REINSTATE ADDRESSES OF LOOP START
10$:	LDA	X,VSNLL1
	STA	X,VSN1
	LDA	X,OPTLL1
	STA	X,OPTR1
	STA	OPTRC
	LDA	X,OPTLL1+1
	STA	X,OPTR1+1
	STA	OPTRC+1
	JMP	POKNL1		;CONTINUE FROM START OF LOOP
;
;POKVI
;	SUB. TO INIT A POKEY VOICE
;		X = OFFSET INTO VARIABLES
;		Y = OFFSET TO POKEY AUDIO CONTROL
;		PKPTR = START ADDR. OF POKEY VOICE
;
POKVI:	LDA	#7
	STA	X,VVOL1		;SET UP TO MEDIAN VOLUME
	LDA	#64.
	STA	X,ORATE1	;SET UP TO MED. RATE
	LDA	#0A0		;DEFAULT TO PURE TONES
	STA	X,VAC1		;STORE AS VOICE CONTROL BITS
	LDA	#0
	STA	X,OKEY1		;SET BACK TO UNUSED KEY
	STA	X,VSEQ1		;CLEAR ENV. SEQ. COUNT
	STA	X,VSN1		;CLEAR TUNE SEQ. COUNT
	STA	X,VIU1		;CLEAR VOICE IN USE FLAG
	STA	X,ODUR1
	STA	X,ODUR1+1
	STA	X,VSF1		;CLEAR SYNTH. MODE
	STA	X,VLC1		;CLEAR LOOP COUNT
	STA	X,VSA1		;CLEAR SYNTH. MODE ADJUSTMENT
	STA	X,VSA1+1
	STA	X,OPTSV1	;CLEAR SUB-PHRASE POINTER (FLAG)
.IF	NE,...CNT		;IF NOTE COUNTER ENABLED...
	STA	X,VCNT1		;CLEAR NOTE COUNT
.ENDC
;
	STA	NY,PKPTR	;TURN OFF POKEY...
;12/13/82	Version 1.03
	DEY
	DEY
	TYA
	BMI	5$		;IF ONLY AN 8-BIT CHANNEL
	LDA	#0
	STA	NY,PKPTR	;CLEAR BOTH HALVES OF A 16-BIT CHANNEL
;
5$:
;12/17/82	Version 1.04
.IF	NE,...AME
	LDAL	NULENV
	STA	X,APTR1		;SET UP POINTERS TO NULL ENVELOPE
.IF	NE,...FRE
	STA	X,FPTR1
.ENDC
	LDAH	NULENV
	STA	X,APTR1+1
.IF	NE,...FRE
	STA	X,FPTR1+1
.ENDC
.ENDC
.IF	EQ,...AME
.IF	NE,...FRE
	LDAL	NULENV
	STA	X,FPTR1
	LDAH	NULENV
	STA	X,FPTR1+1
.ENDC
.ENDC
;
.IF	NE,...SCK		;IF SYNC. CHECK ENABLED...
	LDA	#0FF
	STA	X,OCHK1		;CLEAR CURRENT CHECK MASK
.ENDC
	RTS
	.PAGE
	.SBTTL	RPM NOTE TABLE (FOR 1.5 MHZ CLOCK)
;
;NOTE COUNT TABLE
;
NOTTAB:	.WORD	0		;REST
	.WORD	0B260		;OCTAVE 0, C	16.3750 HZ
	.WORD	0A900		;	 , C#	17.3125 HZ
	.WORD	9E80		;	 , D	18.3750 HZ
	.WORD	9680		;	 , D#	19.4375 HZ
	.WORD	8F4D		;	 , E	20.6250 HZ
	.WORD	8680		;	 , F	21.8125
	.WORD	7F80		;	 , F#	23.1250
	.WORD	77C0		;	 , G	24.5000
	.WORD	7180		;	 , G#	25.9375
	.WORD	6B40		;	 , A	27.5000
	.WORD	6580		;	 , A#	29.1250
	.WORD	5F90		;	 , B	30.8750
	.WORD	5A20		;OCTAVE 1, C	32.750 HZ
	.WORD	5580		;	 , C#	34.625
	.WORD	5080		;	 , D	36.750
	.WORD	4C10		;	 , D#	38.875
	.WORD	47A0		;	 , E	41.250
	.WORD	43C0		;	 , F	43.620
	.WORD	3FF0		;	 , F#	46.250
	.WORD	3C56		;	 , G	49.000
	.WORD	38F0		;	 , G#	51.875
	.WORD	35C0		;	 , A	55.000
	.WORD	32C0		;	 , A#	58.250
	.WORD	2FC0		;	 , B	61.750
	.WORD	2D28		;OCTAVE 2, C	65.50 HZ
	.WORD	2AA0		;	 , C#	69.25
	.WORD	2844		;	 , D	73.50
	.WORD	2600		;	 , D#	77.75
	.WORD	23D0		;	 , E	82.50
	.WORD	21E0		;	 , F	87.25
	.WORD	1FF4		;	 , F#	92.50
	.WORD	1E2C		;	 , G	98.00
	.WORD	1C74		;	 , G#	103.75
	.WORD	1AD4		;	 , A	110.00
	.WORD	1958		;	 , A#	116.50
	.WORD	17EC		;	 , B	123.50
	.WORD	168A		;OCTAVE 3, C	131.0 HZ
	.WORD	154E		;	 , C#	138.5
	.WORD	1419		;	 , D	147.0
	.WORD	12FE		;	 , D#	155.5
	.WORD	11E4		;	 , E	165.0
	.WORD	10ED		;	 , F	174.5
	.WORD	0FF3		;	 , F#	185.0
	.WORD	0F0C		;	 , G	196.0
	.WORD	0E3B		;	 , G#	207.5
	.WORD	0D6C		;	 , A	220.0
	.WORD	0CAA		;	 , A#	233.0
	.WORD	0BF3		;	 , B	247.0
	.WORD	0B60		;OCTAVE 4, C (MIDDLE C)	262 HZ
	.WORD	0AC0		;	 , C#	277 HZ
	.WORD	0A18		;	 , D	294 HZ
	.WORD	0990		;	 , D#	311 HZ
	.WORD	0904		;	 , E	330 HZ
	.WORD	0880		;	 , F	349 HZ
	.WORD	0804		;	 , F#	370
	.WORD	0792		;	 , G	392
	.WORD	0720		;	 , G#	415
	.WORD	06C0		;	 , A	440
	.WORD	0658		;	 , A#	466
	.WORD	05F8		;	 , B	494
	.WORD	05A4		;OCTAVE 5, C	524 HZ
	.WORD	0554		;	 , C#	554
	.WORD	0502		;	 , D	588
	.WORD	04BC		;	 , D#	622
	.WORD	047C		;	 , E	660
	.WORD	043C		;	 , F	698
	.WORD	0400		;	 , F#	740
	.WORD	03C4		;	 , G	784
	.WORD	0390		;	 , G#	830
	.WORD	035E		;	 , A	880
	.WORD	032C		;	 , A#	932
	.WORD	02FE		;	 , B	988
	.WORD	02D0		;OCTAVE 6, C	1048 HZ
	.WORD	02A8		;	 , C#	1108
	.WORD	027E		;	 , D	1176
	.WORD	025A		;	 , D#	1244
	.WORD	0237		;	 , E	1320
	.WORD	0218		;	 , F	1396
	.WORD	01F9		;	 , F#	1480
	.WORD	01DC		;	 , G	1568
	.WORD	01C2		;	 , G#	1660
	.WORD	01A8		;	 , A	1760
	.WORD	0190		;	 , A#	1864
	.WORD	0179		;	 , B	1976
	.WORD	0163		;OCTAVE 7, C	2096
	.WORD	014F		;	 , C#	2216
	.WORD	013B		;	 , D	2352
	.WORD	0129		;	 , D#	2488
	.WORD	0118		;	 , E	2640
	.WORD	0107		;	 , F	2792
	.WORD	00F7		;	 , F#	2960
	.WORD	00E8		;	 , G	3136
	.WORD	00DA		;	 , G#	3320
	.WORD	00CC		;	 , A	3520
	.WORD	00C4		;	 , A#	3728
	.WORD	00BD		;	 , B
	.WORD	00B7		;OCTAVE 8, C (NOTE # 96)	4192
;
	.PAGE
	.SBTTL	RPM ENVELOPE TABLES
;
.IF	NE,...FRE		;IF REQ. ENV. ENABLED...
;FREQ. ENV. TABLE
;
FETAB:	.WORD	NULENV		;NULL ENVELOPE
	.WORD	STRING		;STRINGS
.ENDC
.IF	NE,...AME		;IF AMP. ENV. ENABLED...
;
;AMPLITUDE ENV. TABLE
;
AETAB:	.WORD	NULENV		;NULL ENVELOPE
	.WORD	STACAT		;STACATO
	.WORD	STACA2		;short stac
;
.ENDC
.IF	NE,...FRE
;FREQUENCY ENVELOPES
STRING:
.ENDC

NULENV:	.WORD	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
;12/17/82	Version 1.04
.IF	NE,...FRE
	.WORD	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	.WORD	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
	.WORD	0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
;
;
.ENDC
;
.IF	NE,...AME
;
;AMPLITUDE ENVELOPES
;
STACAT:	.BYTE	   0, -2.,-6.,-16.,-16.,-16.,-16.,-16.
	.BYTE	-16.,-16.,-16.,-16.,-16.,-16.,-16.,-16.
	.BYTE	-16.,-16.,-16.,-16.,-16.,-16.,-16.,-16.
	.BYTE	-16.,-16.,-16.,-16.,-16.,-16.,-16.,-16.

STACA2:	.BYTE	   0,-16.,-16.,-16.,-16.,-16.,-16.,-16.
	.BYTE	-16.,-16.,-16.,-16.,-16.,-16.,-16.,-16.
	.BYTE	-16.,-16.,-16.,-16.,-16.,-16.,-16.,-16.
	.BYTE	-16.,-16.,-16.,-16.,-16.,-16.,-16.,-16.
.ENDC
	.REPT 0D540-.-1
	.BYTE 0FF
	.ENDR
	.BYTE 57

	.WARN .

	.END
                                                                                                  