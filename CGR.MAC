;  filename CGR.MAC
;  global routines

	.ASCII	/  (C) 1983 ATARI ALL RIGHTS RESERVED/
	.BYTE   CHK01

;-------------------
;  difficulty tables

;   initial speeds for gem-eaters
DF.SP1:	.BYTE 2,2,3,4, 5,7,8,9
	.BYTE 0A,01

;  max speed for gem-eaters
DF.MSG:	.BYTE  3, 5, 7, 9, 0A,0B,0C,0D
	.BYTE 0E,01

;  crystal monster speed
DF.CMS:	.BYTE   1, 4, 5, 6, 7, 8, 9,0A
	.BYTE  10,08

;   eating times
DF.ETD:	.BYTE 40,20,10,10, 10,10, 8, 8
	.BYTE  4,10

;   tree growing times
DF.TRG:	.BYTE 040,020, 20,010,   8, 08, 08, 08
	.BYTE  04,020

;   tree speed
DF.TRS:	.BYTE 02, 03, 03, 05,  07, 09, 0A, 0B
	.BYTE 0F, 0A

;   swarm speed
DF.SWS:	.BYTE 01, 03, 06, 03,  05, 06, 04, 08
	.BYTE 0F, 0F

;  creature numbers
DF.CRN: .BYTE 3,8,5,5,  5,5,5,5
	.BYTE 5,5,5,5,  6,6,6,6

; creature distribution, depends on wave number
; creature table
DF.CRT:
	.BYTE 9, 9, 9, 9,  9, 1, 1, 1	; 00
	.BYTE 1,01,0A,01,  1, 1, 1, 1	; 10
	.BYTE 7, 0, 0, 0,  0, 0, 0, 0	; 20
	.BYTE 7, 6,0A, 1,  1, 1, 1, 1	; 30
	.BYTE 7, 0,0A, 1,  1, 1, 1, 1	; 01
	.BYTE 7, 9,0A,0C,  1, 1,0E,0B	; 11
	.BYTE 7, 0,0A, 1,  1, 1, 1, 0	; 21
	.BYTE 7, 6,0A, 9,  9, 1, 1, 0	; 31

	.BYTE 7, 0,0A, 1,  1, 1, 0, 9	; 02
	.BYTE 1,0C,0A, 1,  1, 1, 0, 9	; 12
	.BYTE 7, 1,0A, 1,  1, 1, 1, 0	; 22
	.BYTE 7, 6,0A, 1,  1, 1,0A, 9	; 32
	.BYTE 7, 1,0A, 1,  1, 1, 1, 0	; 03
	.BYTE 7, 1,0A, 1,  1, 1, 1, 0	; 13
	.BYTE 7, 1, 0, 0,  9, 9, 9,0B	; 23
	.BYTE 7, 6,0A,0E, 0E, 1, 1, 0	; 33

; init position 9 creatures
DF.INX: .BYTE 02,03,04,05,06,07,08,09,0A
	.BYTE 0F,10,14,14,08,09,0A,0B,0C
	.BYTE 01,01,01,01,01,01,01,01,14
	.BYTE 0C,0D,02,07,14,13,12,11,10
	.BYTE 01,01,01,02,03,04,05,06,07
	.BYTE 0C,0C,14,0D,08,01,02,02,0C
	.BYTE 0B,0B,0E,0F,10,11,12,13,14
	.BYTE 0A,0A,01,12,11,10,0F,0E,0D

	.BYTE 02,02,02,03,04,05,06,07,01
	.BYTE 0D,08,0D,01,04,05,06,07,01
	.BYTE 02,02,02,01,04,05,06,07,08
	.BYTE 02,02,03,02,05,04,03,02,01
	.BYTE 08,08,02,03,04,05,06,07,01
	.BYTE 13,13,02,03,04,05,06,07,01
	.BYTE 01,02,14,03,04,05,06,14,0B
	.BYTE 08,08,02,14,04,05,06,07,01

DF.INY: .BYTE 0C,14,14,14,14,14,14,14,14
	.BYTE 13,10,03,04,14,14,14,14,14
	.BYTE 02,01,04,08,0C,10,0A,06,14
	.BYTE 02,02,14,14,14,14,14,14,14
	.BYTE 01,01,14,14,14,14,14,14,14
	.BYTE 01,01,02,02,0C,14,14,02,06
	.BYTE 0B,0B,14,14,14,14,14,14,14
	.BYTE 0C,0C,10,14,14,14,14,14,14

	.BYTE 09,09,14,14,14,14,14,14,14
	.BYTE 0D,14,0E,14,14,14,14,14,14
	.BYTE 02,02,14,01,14,14,14,14,14
	.BYTE 0C,0D,02,02,14,14,14,14,14
	.BYTE 14,14,14,14,14,14,14,14,14
	.BYTE 06,06,14,14,14,14,14,14,14
	.BYTE 02,02,02,02,02,14,14,14,0B
	.BYTE 01,01,02,14,04,05,06,07,09

;----------------------------
;  reset software init
RS.INI:
	JSR EE.CMD	;  get coin mode from EEROM

;  attract mode flag
	TRAI 0FF ATRACT

;  scrolling and flip
	TRAI 18 HW.VSV
	TRAI 0  HW.HSV
	STA	HW.FLV
	STA ST.PLY	;  game play
	STA GM.STA	;  game state
	STA $$CRDT
	STA WV.WAR	;  warp

;  high score table
;  transfer data from EEROM

	JSR EECHKT		;  check if data OK

	LDX #HFSIZ-3
	LDY #2
	BEGIN
	 TRAM   HFPSCO(Y) SC.HS1(X)
	 TRAM 3+HFPSCO(Y) SC.HS2(X)
	 TRAM 6+HFPSCO(Y) SC.HS3(X)
	 TRAM   HFPINI(Y) SC.HI1(X)
	 TRAM 3+HFPINI(Y) SC.HI2(X)
	 TRAM 6+HFPINI(Y) SC.HI3(X)
	 INX
	 DEY
	MIEND

	LDA #0
	LDX #HFSIZ-3
	BEGIN
	 ORA SC.HS3(X)
	INX
	CPX #HFSIZ
	EQEND

	CMP #3
	IFCC

	LDX #HFSIZ-3
	BEGIN
	 LDA #3
	 STA SC.HS3(X)
	 LDA #0
	 STA SC.HS2(X)
	 STA SC.HS1(X)
	 LDA #4A
	 STA SC.HI1(X)
	 STA SC.HI2(X)
	 STA SC.HI3(X)
	INX
	CPX #HFSIZ
	EQEND

	ENDIF


	TRAI HFSIZ-3 TEMP1
	TRAI 99 TEMP2
	TRAI 2 TEMP2+1
	BEGIN
	 DEC TEMP1
	 LDA TEMP2
	 IFEQ
	  DEC TEMP2+1
	 ENDIF

	 SED			;  scores
	 LDA TEMP2
	 SUB #1
	 STA TEMP2
	 CLD

	 LDX TEMP1
	 STA SC.HS2(X)
	 LDA #0
	 STA SC.HS1(X)
	 LDA TEMP2+1
	 STA SC.HS3(X)
				;  initials
	 LDA RANDOM
	 AND #1F
	 TAY
	 TRAM SC.DE1(Y) SC.HI1(X)
	 TRAM SC.DE2(Y) SC.HI2(X)
	 TRAM SC.DE3(Y) SC.HI3(X)

	STA HW.WDC		;  WOOF
	LDA TEMP1
	EQEND

;  test inits
	RTS

;  A   B  C  D  E  F  G  H  I  J  K  L  M  N
;  4A  4B 4C 4D 4E 4F 50 51 52 53 54 55 56 57
;  O   P  Q  R  S  T  U  V  W  X  Y  Z
;  58 59 5A 5B 5C 5D 5E 5F 60 61 62 63

;  bbm,edg,mar,mec,BAS,fxl,SMB,leb ,clt,pdm,wgc,s l,sf ,ray,rbd,ed
;  GDS  ORR REM  DAR  DAT   MFP BUB BAS  BB  TW
;  CTC  BEN STM  GJR  REX

SC.DE1:	.BYTE 4B,4E,56,56, 4B,4F,5C,55
	.BYTE 4C,59,60,5C, 5C,5B,5B,4E
	.BYTE 50,58,5B,4D, 4D,56,4B,4B
	.BYTE 4B,5D,59,4C, 4B,5C,50,5B

SC.DE2:	.BYTE 4B,4D,4A,4E, 4A,61,56,4E
	.BYTE 55,4D,50,64, 4F,4A,4B,4D
	.BYTE 4D,5B,4E,4A, 4A,4F,5E,4A
	.BYTE 64,64,4C,5D, 4E,5D,53,4E
SC.DE3:	.BYTE 56,50,5B,4C, 5C,55,4B,4B
	.BYTE 5D,56,4C,55, 64,62,4D,64
	.BYTE 5C,5B,56,5B, 5D,59,4B,5C
	.BYTE 4B,60,5D,4C, 57,56,5B,61

;-------------------------
;  hide all motion objects
GR.MCL:
	TR16AI MT.BU1 MT.PTR
	JSR GR.MC1
	TR16AI MT.BU0 MT.PTR
	JSR GR.MC1
	RTS
GR.MC1:
	LDY #28*4
	BEGIN
	DEY
	 TRAI 0F0 @MT.PTR(Y)
	 TYA
	EQEND
	RTS

;------------------------
; routine to clear screen
GR.SCL:
	JSR GR.MCL	;  clear motion objects

;  bit-map too
	LDX #0
	STX HW.AY
	STX TEMP1
 	DEX
	STX HW.YIN

	TRAI 0 TEMP1
	LDA #00F
5$:	LDY #40
	LDX TEMP1
	STX XB
10$:
	.REPT 4
	STA VB
	.ENDM
	DEY
	BNE 10$
	JSR MN.HOU	;  housekeeping
	DEC TEMP1
	BNE 5$

	TRAI 0FF HW.AY
	RTS


;----------------------------
;  determine end of scrolling
WV.ESD:
	LDA WV.XCO
	CMP WV.XCD
	IFEQ
	LDA WV.YCO
	SBC WV.YCD		;  carry set because EQ
	IFEQ
	   STA WV.SCF
	   JSR GM.EY0
	   RTS
	ENDIF
	ENDIF

	LDA EN.WRF
	IFNE
	 LDA WV.XCO
	 ASLS 2
	 STA RS.KEY+1
	 LDA #12
	 JSR MN.SN1
	ENDIF
	RTS

;----------------------------------------
;  routine to set bitmap-values of faces
CL.PR:  
	EOR #80
	ORA #0F
	AND #8F

	LDY #7
	BEGIN
	 SUB #10
	 STA FC.BV-1(Y)
	 DEY
	EQEND
	RTS

;----------------------------
; routine to draw type 1 line
; input: LN.LG1 ... number of segments
;        LN.HCR ... horizontal coordinate
;	 LN.VCR ... vertical coordinate
;	 LN.CO1 ... pixel color
LN.1:	LDY LN.LG1
	TRAM LN.HCR XB
	TRAM LN.VCR YB
	LDA LN.CO1
10$:	
; horizontal
	STA VB
	DEY
	BMI 20$
	INC XB

	DEC YB
	JMP 10$
20$:	
	RTS

;   fast version
LN.F1:
	TRAI 0 HW.AY
	STA  HW.AX
	STA  HW.XIN
	TRAI 0FF HW.YIN

	TRAM LN.HCR XB      ;   LN.LG harwired to 4
	TRAM LN.VCR YB
	LDA LN.CO1

	.REPT 4
	STA VB
;	INC XB
;	DEC YB
	.ENDM
	STA VB


	TRAI 0FF HW.AY
	STA	 HW.AX
	RTS


;-----------------------------
; routine to draw type 2 line

; input: LN.LG2 ... number of segments
;        LN.HCR ... horizontal coordinate
;	 LN.VCR ... vertical coordinate
;	 LN.CO2 ... pixel color
LN.2:
	LDY LN.LG2
	TRAM LN.HCR XB
	TRAM LN.VCR YB
	LDA LN.CO2
10$:	
	STA VB
	DEY
	BMI 20$
	DEC XB

	STA VB
	DEY
	BMI 20$
	DEC XB

	STA VB
	DEY
	BMI 20$
	DEC XB

	STA VB
	DEY
	BMI 20$
	DEC XB
	DEC YB

	JMP 10$

 20$:	
	RTS


LN.F2:			; fast version,  LN.LG2=8
	TRAM LN.HCR XB
	TRAM LN.VCR YB

	TRAI 0 HW.AX
	TRAI 0FF HW.XIN

	LDA LN.CO2

	.REPT 3
	STA VB
;	DEC XB
	.ENDM

	DEC YB
	.REPT 4
	STA VB
;	DEC XB
	.ENDM

	DEC YB

	STA VB
;	DEC XB
	STA VB

	TRAI 0FF HW.AX
	RTS

;-------------------------------
; routine to draw line of type 3
LN.3:
	LDY #0
	STY HW.AY
	DEY
	STY HW.YIN

	LDY LN.LG3
	TRAM LN.HCR XB
	TRAM LN.VCR YB


	LDA LN.CO3
10$:	STA VB
	DEY
	BMI 20$
;	DEC YB
	JMP 10$

20$:
	TRAI 0FF HW.AY	
	RTS


;----------------------
;  update score
SC.UPD: SED
	LDA SC.SCO
	ADD SC.INC
	STA SC.SCO
	LDA SC.SCO+1
	ADC SC.INC+1
	STA SC.SCO+1
	LDA SC.SCO+2
	ADC SC.INC+2
	STA SC.SCO+2
	CLD

	PHXYA			;  don't zap (X)
	JSR SC.OT2
	PLXYA

	LDA SC.NEL
	IFNE
	LDA SC.SCO+2
	CMP SC.NEL
	IFCS

	 SED
10$:	 LDA SC.NEL
	 ADD #7		;  extra life every 70000
	 IFCS
	  LDA #0
	 ENDIF		;  no bugs at 1 million please
	 STA SC.NEL
	 LDA SC.SCO+2
	 CMP SC.NEL
	 BCS 10$	;  max of 1 extra life per inc

	 CLD
	 LDA WV.LIV
	 CMP #6		;  max of six lives
	 IFCC

	 LDA #1
	 JSR MN.SN1	; extra life sound

	 LDA SC.INC+2
	 CMP #2		;  don't give extra lives for warp
	 IFCC
	  INC WV.LIV
	 ENDIF

	 TRAM WV.LIV TEMP5
	 PHXYA			;  don't zap (X)
	 JSR SC.LD2
	 PLXYA

	 ENDIF
	ENDIF
	ENDIF

	RTS
                                                                                                                                                                                                                                                                                                                                                        